openapi: 3.0.4
info:
  title: Anthropic API
  version: '89'
servers:
  - url: https://api.anthropic.com
paths:
  /v1/messages:
    post:
      tags:
        - Messages
      summary: Create a Message
      description: "Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.\n\nThe Messages API can be used for either single queries or stateless multi-turn conversations.\n\nLearn more about the Messages API in our [user guide](/en/docs/initial-setup)"
      operationId: messages_post
      parameters:
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageParams'
        required: true
      responses:
        '200':
          description: Message object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/complete:
    post:
      tags:
        - Text Completions
      summary: Create a Text Completion
      description: "[Legacy] Create a Text Completion.\n\nThe Text Completions API is a legacy API. We recommend using the [Messages API](https://docs.anthropic.com/en/api/messages) going forward.\n\nFuture models and features will not be compatible with Text Completions. See our [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages) for guidance in migrating from Text Completions to Messages."
      operationId: complete_post
      parameters:
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
        required: true
      responses:
        '200':
          description: Text Completion object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/models:
    get:
      summary: List Models
      description: "List available models.\n\nThe Models API response can be used to determine which models are available for use in the API. More recently released models are listed first."
      operationId: models_list
      parameters:
        - name: before_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
          schema:
            title: Before Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
        - name: after_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
          schema:
            title: After Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
        - name: limit
          in: query
          description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          schema:
            title: Limit
            maximum: 1000
            minimum: 1
            type: integer
            description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
            default: 20
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_ModelInfo_'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/models/{model_id}':
    get:
      summary: Get a Model
      description: "Get a specific model.\n\nThe Models API response can be used to determine information about a specific model or resolve a model alias to a model ID."
      operationId: models_get
      parameters:
        - name: model_id
          in: path
          description: Model identifier or alias.
          required: true
          schema:
            title: Model Id
            type: string
            description: Model identifier or alias.
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelInfo'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/messages/batches:
    post:
      tags:
        - Message Batches
      summary: Create a Message Batch
      description: "Send a batch of Message creation requests.\n\nThe Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: message_batches_post
      parameters:
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageBatchParams'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBatch'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Message Batches
      summary: List Message Batches
      description: "List all Message Batches within a Workspace. Most recently created batches are returned first.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: message_batches_list
      parameters:
        - name: before_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
          schema:
            title: Before Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
        - name: after_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
          schema:
            title: After Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
        - name: limit
          in: query
          description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          schema:
            title: Limit
            maximum: 1000
            minimum: 1
            type: integer
            description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
            default: 20
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_MessageBatch_'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/messages/batches/{message_batch_id}':
    get:
      tags:
        - Message Batches
      summary: Retrieve a Message Batch
      description: "This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the `results_url` field in the response.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: message_batches_retrieve
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBatch'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Message Batches
      summary: Delete a Message Batch
      description: "Delete a Message Batch.\n\nMessage Batches can only be deleted once they've finished processing. If you'd like to delete an in-progress batch, you must first cancel it.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: message_batches_delete
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMessageBatchResponse'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/messages/batches/{message_batch_id}/cancel':
    post:
      tags:
        - Message Batches
      summary: Cancel a Message Batch
      description: "Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a `canceling` state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.\n\nThe number of canceled requests is specified in `request_counts`. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: message_batches_cancel
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBatch'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/messages/batches/{message_batch_id}/results':
    get:
      tags:
        - Message Batches
      summary: Retrieve Message Batch results
      description: "Streams the results of a Message Batch as a `.jsonl` file.\n\nEach line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: message_batches_results
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/x-jsonl:
              schema:
                $ref: '#/components/schemas/MessageBatchIndividualResponse'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/messages/count_tokens:
    post:
      tags:
        - Messages
      summary: Count tokens in a Message
      description: "Count the number of tokens in a Message.\n\nThe Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.\n\nLearn more about token counting in our [user guide](/en/docs/build-with-claude/token-counting)"
      operationId: messages_count_tokens_post
      parameters:
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountMessageTokensParams'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountMessageTokensResponse'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/messages?beta=true:
    post:
      tags:
        - Messages
      summary: Create a Message
      description: "Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.\n\nThe Messages API can be used for either single queries or stateless multi-turn conversations.\n\nLearn more about the Messages API in our [user guide](/en/docs/initial-setup)"
      operationId: beta_messages_post
      parameters:
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetaCreateMessageParams'
        required: true
      responses:
        '200':
          description: Message object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaMessage'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
  /v1/models?beta=true:
    get:
      summary: List Models
      description: "List available models.\n\nThe Models API response can be used to determine which models are available for use in the API. More recently released models are listed first."
      operationId: beta_models_list
      parameters:
        - name: before_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
          schema:
            title: Before Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
        - name: after_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
          schema:
            title: After Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
        - name: limit
          in: query
          description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          schema:
            title: Limit
            maximum: 1000
            minimum: 1
            type: integer
            description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
            default: 20
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaListResponse_ModelInfo_'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
  '/v1/models/{model_id}?beta=true':
    get:
      summary: Get a Model
      description: "Get a specific model.\n\nThe Models API response can be used to determine information about a specific model or resolve a model alias to a model ID."
      operationId: beta_models_get
      parameters:
        - name: model_id
          in: path
          description: Model identifier or alias.
          required: true
          schema:
            title: Model Id
            type: string
            description: Model identifier or alias.
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaModelInfo'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
  /v1/messages/batches?beta=true:
    post:
      tags:
        - Message Batches
      summary: Create a Message Batch
      description: "Send a batch of Message creation requests.\n\nThe Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: beta_message_batches_post
      parameters:
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetaCreateMessageBatchParams'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaMessageBatch'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
    get:
      tags:
        - Message Batches
      summary: List Message Batches
      description: "List all Message Batches within a Workspace. Most recently created batches are returned first.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: beta_message_batches_list
      parameters:
        - name: before_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
          schema:
            title: Before Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.'
        - name: after_id
          in: query
          description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
          schema:
            title: After Id
            type: string
            description: 'ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.'
        - name: limit
          in: query
          description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          schema:
            title: Limit
            maximum: 1000
            minimum: 1
            type: integer
            description: "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
            default: 20
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaListResponse_MessageBatch_'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
  '/v1/messages/batches/{message_batch_id}?beta=true':
    get:
      tags:
        - Message Batches
      summary: Retrieve a Message Batch
      description: "This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the `results_url` field in the response.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: beta_message_batches_retrieve
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaMessageBatch'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
    delete:
      tags:
        - Message Batches
      summary: Delete a Message Batch
      description: "Delete a Message Batch.\n\nMessage Batches can only be deleted once they've finished processing. If you'd like to delete an in-progress batch, you must first cancel it.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: beta_message_batches_delete
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaDeleteMessageBatchResponse'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
  '/v1/messages/batches/{message_batch_id}/cancel?beta=true':
    post:
      tags:
        - Message Batches
      summary: Cancel a Message Batch
      description: "Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a `canceling` state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.\n\nThe number of canceled requests is specified in `request_counts`. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: beta_message_batches_cancel
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaMessageBatch'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
  '/v1/messages/batches/{message_batch_id}/results?beta=true':
    get:
      tags:
        - Message Batches
      summary: Retrieve Message Batch results
      description: "Streams the results of a Message Batch as a `.jsonl` file.\n\nEach line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)"
      operationId: beta_message_batches_results
      parameters:
        - name: message_batch_id
          in: path
          description: ID of the Message Batch.
          required: true
          schema:
            title: Message Batch Id
            type: string
            description: ID of the Message Batch.
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
        - name: x-api-key
          in: header
          description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          schema:
            title: X-Api-Key
            type: string
            description: "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
      responses:
        '200':
          description: Successful Response
          content:
            application/x-jsonl:
              schema:
                $ref: '#/components/schemas/BetaMessageBatchIndividualResponse'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
  /v1/messages/count_tokens?beta=true:
    post:
      tags:
        - Messages
      summary: Count tokens in a Message
      description: "Count the number of tokens in a Message.\n\nThe Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.\n\nLearn more about token counting in our [user guide](/en/docs/build-with-claude/token-counting)"
      operationId: beta_messages_count_tokens_post
      parameters:
        - name: anthropic-beta
          in: header
          description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          schema:
            title: Anthropic-Beta
            type: string
            items:
              type: string
            description: "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
            x-stainless-override-schema:
              x-stainless-param: betas
              x-stainless-extend-default: true
              type: array
              description: Optional header to specify the beta version(s) you want to use.
              items:
                $ref: '#/components/schemas/AnthropicBeta'
        - name: anthropic-version
          in: header
          description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          schema:
            title: Anthropic-Version
            type: string
            description: "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetaCountMessageTokensParams'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaCountMessageTokensResponse'
        4XX:
          description: "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetaErrorResponse'
components:
  schemas:
    APIError:
      title: APIError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Internal server error
        type:
          title: Type
          enum:
            - api_error
          type: string
          default: api_error
    AuthenticationError:
      title: AuthenticationError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Authentication error
        type:
          title: Type
          enum:
            - authentication_error
          type: string
          default: authentication_error
    Base64ImageSource:
      title: Base64ImageSource
      required:
        - data
        - media_type
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
          format: byte
        media_type:
          title: Media Type
          enum:
            - image/jpeg
            - image/png
            - image/gif
            - image/webp
          type: string
        type:
          title: Type
          enum:
            - base64
          type: string
      additionalProperties: false
    Base64PDFSource:
      title: Base64PDFSource
      required:
        - data
        - media_type
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
          format: byte
        media_type:
          title: Media Type
          enum:
            - application/pdf
          type: string
        type:
          title: Type
          enum:
            - base64
          type: string
      additionalProperties: false
    BashTool_20250124:
      title: BashTool_20250124
      required:
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        name:
          title: Name
          enum:
            - bash
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - bash_20250124
          type: string
      additionalProperties: false
    BetaAPIError:
      title: APIError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Internal server error
        type:
          title: Type
          enum:
            - api_error
          type: string
          default: api_error
    BetaAuthenticationError:
      title: AuthenticationError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Authentication error
        type:
          title: Type
          enum:
            - authentication_error
          type: string
          default: authentication_error
    BetaBase64ImageSource:
      title: Base64ImageSource
      required:
        - data
        - media_type
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
          format: byte
        media_type:
          title: Media Type
          enum:
            - image/jpeg
            - image/png
            - image/gif
            - image/webp
          type: string
        type:
          title: Type
          enum:
            - base64
          type: string
      additionalProperties: false
    BetaBase64PDFSource:
      title: Base64PDFSource
      required:
        - data
        - media_type
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
          format: byte
        media_type:
          title: Media Type
          enum:
            - application/pdf
          type: string
        type:
          title: Type
          enum:
            - base64
          type: string
      additionalProperties: false
    BetaBashTool_20241022:
      title: BashTool_20241022
      required:
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        name:
          title: Name
          enum:
            - bash
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - bash_20241022
          type: string
      additionalProperties: false
    BetaBashTool_20250124:
      title: BashTool_20250124
      required:
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        name:
          title: Name
          enum:
            - bash
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - bash_20250124
          type: string
      additionalProperties: false
    BetaBillingError:
      title: BillingError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Billing error
        type:
          title: Type
          enum:
            - billing_error
          type: string
          default: billing_error
    BetaCacheControlEphemeral:
      title: CacheControlEphemeral
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - ephemeral
          type: string
      additionalProperties: false
    BetaCanceledResult:
      title: CanceledResult
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - canceled
          type: string
          default: canceled
    BetaCitationsDelta:
      title: CitationsDelta
      required:
        - citation
        - type
      type: object
      properties:
        citation:
          title: Citation
          oneOf:
            - $ref: '#/components/schemas/BetaResponseCharLocationCitation'
            - $ref: '#/components/schemas/BetaResponsePageLocationCitation'
            - $ref: '#/components/schemas/BetaResponseContentBlockLocationCitation'
            - $ref: '#/components/schemas/BetaResponseWebSearchResultLocationCitation'
          discriminator:
            propertyName: type
            mapping:
              char_location: '#/components/schemas/BetaResponseCharLocationCitation'
              content_block_location: '#/components/schemas/BetaResponseContentBlockLocationCitation'
              page_location: '#/components/schemas/BetaResponsePageLocationCitation'
              web_search_result_location: '#/components/schemas/BetaResponseWebSearchResultLocationCitation'
        type:
          title: Type
          enum:
            - citations_delta
          type: string
          default: citations_delta
    BetaComputerUseTool_20241022:
      title: ComputerUseTool_20241022
      required:
        - display_height_px
        - display_width_px
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        display_height_px:
          title: Display Height Px
          minimum: 1
          type: integer
          description: The height of the display in pixels.
        display_number:
          title: Display Number
          minimum: 0
          type: integer
          description: 'The X11 display number (e.g. 0, 1) for the display.'
          nullable: true
        display_width_px:
          title: Display Width Px
          minimum: 1
          type: integer
          description: The width of the display in pixels.
        name:
          title: Name
          enum:
            - computer
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - computer_20241022
          type: string
      additionalProperties: false
    BetaComputerUseTool_20250124:
      title: ComputerUseTool_20250124
      required:
        - display_height_px
        - display_width_px
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        display_height_px:
          title: Display Height Px
          minimum: 1
          type: integer
          description: The height of the display in pixels.
        display_number:
          title: Display Number
          minimum: 0
          type: integer
          description: 'The X11 display number (e.g. 0, 1) for the display.'
          nullable: true
        display_width_px:
          title: Display Width Px
          minimum: 1
          type: integer
          description: The width of the display in pixels.
        name:
          title: Name
          enum:
            - computer
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - computer_20250124
          type: string
      additionalProperties: false
    BetaContentBlockDeltaEvent:
      title: ContentBlockDeltaEvent
      required:
        - delta
        - index
        - type
      type: object
      properties:
        delta:
          title: Delta
          oneOf:
            - $ref: '#/components/schemas/BetaTextContentBlockDelta'
            - $ref: '#/components/schemas/BetaInputJsonContentBlockDelta'
            - $ref: '#/components/schemas/BetaCitationsDelta'
            - $ref: '#/components/schemas/BetaThinkingContentBlockDelta'
            - $ref: '#/components/schemas/BetaSignatureContentBlockDelta'
          discriminator:
            propertyName: type
            mapping:
              citations_delta: '#/components/schemas/BetaCitationsDelta'
              input_json_delta: '#/components/schemas/BetaInputJsonContentBlockDelta'
              signature_delta: '#/components/schemas/BetaSignatureContentBlockDelta'
              text_delta: '#/components/schemas/BetaTextContentBlockDelta'
              thinking_delta: '#/components/schemas/BetaThinkingContentBlockDelta'
        index:
          title: Index
          type: integer
        type:
          title: Type
          enum:
            - content_block_delta
          type: string
          default: content_block_delta
    BetaContentBlockSource:
      title: ContentBlockSource
      required:
        - content
        - type
      type: object
      properties:
        content:
          title: Content
          anyOf:
            - type: string
            - title: beta_content_block_source_content
              type: array
              items:
                title: beta_content_block_source_content_item
                oneOf:
                  - $ref: '#/components/schemas/BetaRequestTextBlock'
                  - $ref: '#/components/schemas/BetaRequestImageBlock'
                discriminator:
                  propertyName: type
                  mapping:
                    image: '#/components/schemas/BetaRequestImageBlock'
                    text: '#/components/schemas/BetaRequestTextBlock'
        type:
          title: Type
          enum:
            - content
          type: string
      additionalProperties: false
    BetaContentBlockStartEvent:
      title: ContentBlockStartEvent
      required:
        - content_block
        - index
        - type
      type: object
      properties:
        content_block:
          title: Content Block
          oneOf:
            - $ref: '#/components/schemas/BetaResponseTextBlock'
            - $ref: '#/components/schemas/BetaResponseToolUseBlock'
            - $ref: '#/components/schemas/BetaResponseServerToolUseBlock'
            - $ref: '#/components/schemas/BetaResponseWebSearchToolResultBlock'
            - $ref: '#/components/schemas/BetaResponseThinkingBlock'
            - $ref: '#/components/schemas/BetaResponseRedactedThinkingBlock'
          discriminator:
            propertyName: type
            mapping:
              redacted_thinking: '#/components/schemas/BetaResponseRedactedThinkingBlock'
              server_tool_use: '#/components/schemas/BetaResponseServerToolUseBlock'
              text: '#/components/schemas/BetaResponseTextBlock'
              thinking: '#/components/schemas/BetaResponseThinkingBlock'
              tool_use: '#/components/schemas/BetaResponseToolUseBlock'
              web_search_tool_result: '#/components/schemas/BetaResponseWebSearchToolResultBlock'
        index:
          title: Index
          type: integer
        type:
          title: Type
          enum:
            - content_block_start
          type: string
          default: content_block_start
    BetaContentBlockStopEvent:
      title: ContentBlockStopEvent
      required:
        - index
        - type
      type: object
      properties:
        index:
          title: Index
          type: integer
        type:
          title: Type
          enum:
            - content_block_stop
          type: string
          default: content_block_stop
    BetaCountMessageTokensParams:
      title: CountMessageTokensParams
      required:
        - messages
        - model
      type: object
      properties:
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/BetaInputMessage'
          description: "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100000 messages in a single request."
        model:
          $ref: '#/components/schemas/Model'
        system:
          title: System
          anyOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/BetaRequestTextBlock'
          description: "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts)."
          example:
            - text: Today's date is 2024-06-01.
              type: text
        thinking:
          $ref: '#/components/schemas/BetaThinkingConfigParam'
        tool_choice:
          $ref: '#/components/schemas/BetaToolChoice'
        tools:
          title: Tools
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/BetaTool'
              - $ref: '#/components/schemas/BetaComputerUseTool_20241022'
              - $ref: '#/components/schemas/BetaBashTool_20241022'
              - $ref: '#/components/schemas/BetaTextEditor_20241022'
              - $ref: '#/components/schemas/BetaComputerUseTool_20250124'
              - $ref: '#/components/schemas/BetaBashTool_20250124'
              - $ref: '#/components/schemas/BetaTextEditor_20250124'
              - $ref: '#/components/schemas/BetaWebSearchTool_20250305'
          description: "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details."
          example:
            description: Get the current weather in a given location
            input_schema:
              properties:
                location:
                  description: 'The city and state, e.g. San Francisco, CA'
                  type: string
                unit:
                  description: 'Unit for the output - one of (celsius, fahrenheit)'
                  type: string
              required:
                - location
              type: object
            name: get_weather
      additionalProperties: false
      example:
        messages:
          - content: 'Hello, world'
            role: user
        model: claude-3-7-sonnet-20250219
    BetaCountMessageTokensResponse:
      title: CountMessageTokensResponse
      required:
        - input_tokens
      type: object
      properties:
        input_tokens:
          title: Input Tokens
          type: integer
          description: 'The total number of tokens across the provided list of messages, system prompt, and tools.'
          example: 2095
      example:
        input_tokens: 2095
    BetaCreateMessageBatchParams:
      title: CreateMessageBatchParams
      required:
        - requests
      type: object
      properties:
        requests:
          title: Requests
          maxItems: 10000
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/BetaMessageBatchIndividualRequestParams'
          description: List of requests for prompt completion. Each is an individual request to create a Message.
      additionalProperties: false
    BetaCreateMessageParams:
      title: CreateMessageParams
      required:
        - model
        - messages
        - max_tokens
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/BetaInputMessage'
          description: "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100000 messages in a single request."
        max_tokens:
          title: Max Tokens
          minimum: 1
          type: integer
          description: "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details."
          example: 1024
        metadata:
          allOf:
            - $ref: '#/components/schemas/BetaMetadata'
          description: An object describing metadata about the request.
        stop_sequences:
          title: Stop Sequences
          type: array
          items:
            type: string
          description: "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence."
        stream:
          title: Stream
          type: boolean
          description: "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/messages-streaming) for details."
        system:
          title: System
          anyOf:
            - type: string
              x-stainless-skip:
                - go
                - cli
            - type: array
              items:
                $ref: '#/components/schemas/BetaRequestTextBlock'
          description: "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts)."
          example:
            - text: Today's date is 2024-06-01.
              type: text
        temperature:
          title: Temperature
          maximum: 1
          minimum: 0
          type: number
          description: "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic."
          example: 1
        thinking:
          $ref: '#/components/schemas/BetaThinkingConfigParam'
        tool_choice:
          $ref: '#/components/schemas/BetaToolChoice'
        tools:
          title: Tools
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/BetaTool'
              - $ref: '#/components/schemas/BetaComputerUseTool_20241022'
              - $ref: '#/components/schemas/BetaBashTool_20241022'
              - $ref: '#/components/schemas/BetaTextEditor_20241022'
              - $ref: '#/components/schemas/BetaComputerUseTool_20250124'
              - $ref: '#/components/schemas/BetaBashTool_20250124'
              - $ref: '#/components/schemas/BetaTextEditor_20250124'
              - $ref: '#/components/schemas/BetaWebSearchTool_20250305'
          description: "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details."
          example:
            description: Get the current weather in a given location
            input_schema:
              properties:
                location:
                  description: 'The city and state, e.g. San Francisco, CA'
                  type: string
                unit:
                  description: 'Unit for the output - one of (celsius, fahrenheit)'
                  type: string
              required:
                - location
              type: object
            name: get_weather
        top_k:
          title: Top K
          minimum: 0
          type: integer
          description: "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 5
        top_p:
          title: Top P
          maximum: 1
          minimum: 0
          type: number
          description: "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 0.7
      additionalProperties: false
      example:
        max_tokens: 1024
        messages:
          - content: 'Hello, world'
            role: user
        model: claude-3-7-sonnet-20250219
    BetaDeleteMessageBatchResponse:
      title: DeleteMessageBatchResponse
      required:
        - id
        - type
      type: object
      properties:
        id:
          title: Id
          type: string
          description: ID of the Message Batch.
          example: msgbatch_013Zva2CMHLNnXjNJJKqJ2EF
        type:
          title: Type
          enum:
            - message_batch_deleted
          type: string
          description: "Deleted object type.\n\nFor Message Batches, this is always `\"message_batch_deleted\"`."
          default: message_batch_deleted
    BetaErrorResponse:
      title: ErrorResponse
      required:
        - error
        - type
      type: object
      properties:
        error:
          title: Error
          oneOf:
            - $ref: '#/components/schemas/BetaInvalidRequestError'
            - $ref: '#/components/schemas/BetaAuthenticationError'
            - $ref: '#/components/schemas/BetaBillingError'
            - $ref: '#/components/schemas/BetaPermissionError'
            - $ref: '#/components/schemas/BetaNotFoundError'
            - $ref: '#/components/schemas/BetaRateLimitError'
            - $ref: '#/components/schemas/BetaGatewayTimeoutError'
            - $ref: '#/components/schemas/BetaAPIError'
            - $ref: '#/components/schemas/BetaOverloadedError'
          discriminator:
            propertyName: type
            mapping:
              api_error: '#/components/schemas/BetaAPIError'
              authentication_error: '#/components/schemas/BetaAuthenticationError'
              billing_error: '#/components/schemas/BetaBillingError'
              invalid_request_error: '#/components/schemas/BetaInvalidRequestError'
              not_found_error: '#/components/schemas/BetaNotFoundError'
              overloaded_error: '#/components/schemas/BetaOverloadedError'
              permission_error: '#/components/schemas/BetaPermissionError'
              rate_limit_error: '#/components/schemas/BetaRateLimitError'
              timeout_error: '#/components/schemas/BetaGatewayTimeoutError'
        type:
          title: Type
          enum:
            - error
          type: string
          default: error
    BetaErroredResult:
      title: ErroredResult
      required:
        - error
        - type
      type: object
      properties:
        error:
          $ref: '#/components/schemas/BetaErrorResponse'
        type:
          title: Type
          enum:
            - errored
          type: string
          default: errored
    BetaExpiredResult:
      title: ExpiredResult
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - expired
          type: string
          default: expired
    BetaGatewayTimeoutError:
      title: GatewayTimeoutError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Request timeout
        type:
          title: Type
          enum:
            - timeout_error
          type: string
          default: timeout_error
    BetaInputJsonContentBlockDelta:
      title: InputJsonContentBlockDelta
      required:
        - partial_json
        - type
      type: object
      properties:
        partial_json:
          title: Partial Json
          type: string
        type:
          title: Type
          enum:
            - input_json_delta
          type: string
          default: input_json_delta
    BetaInputMessage:
      title: InputMessage
      required:
        - content
        - role
      type: object
      properties:
        content:
          title: Content
          anyOf:
            - type: string
              x-stainless-skip:
                - go
                - cli
            - type: array
              items:
                $ref: '#/components/schemas/BetaInputContentBlock'
              example:
                - type: text
                  text: What is a quaternion?
        role:
          title: Role
          enum:
            - user
            - assistant
          type: string
      additionalProperties: false
    BetaInputSchema:
      title: InputSchema
      required:
        - type
      type: object
      properties:
        properties:
          title: Properties
          type: object
          nullable: true
        type:
          title: Type
          enum:
            - object
          type: string
    BetaInvalidRequestError:
      title: InvalidRequestError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Invalid request
        type:
          title: Type
          enum:
            - invalid_request_error
          type: string
          default: invalid_request_error
    BetaListResponse_MessageBatch_:
      title: 'ListResponse[MessageBatch]'
      required:
        - data
        - first_id
        - has_more
        - last_id
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/BetaMessageBatch'
        first_id:
          title: First Id
          type: string
          description: First ID in the `data` list. Can be used as the `before_id` for the previous page.
          nullable: true
        has_more:
          title: Has More
          type: boolean
          description: Indicates if there are more results in the requested page direction.
        last_id:
          title: Last Id
          type: string
          description: Last ID in the `data` list. Can be used as the `after_id` for the next page.
          nullable: true
    BetaListResponse_ModelInfo_:
      title: 'ListResponse[ModelInfo]'
      required:
        - data
        - first_id
        - has_more
        - last_id
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/BetaModelInfo'
        first_id:
          title: First Id
          type: string
          description: First ID in the `data` list. Can be used as the `before_id` for the previous page.
          nullable: true
        has_more:
          title: Has More
          type: boolean
          description: Indicates if there are more results in the requested page direction.
        last_id:
          title: Last Id
          type: string
          description: Last ID in the `data` list. Can be used as the `after_id` for the next page.
          nullable: true
    BetaMessage:
      title: Message
      required:
        - id
        - type
        - role
        - content
        - model
        - stop_reason
        - stop_sequence
        - usage
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "Unique object identifier.\n\nThe format and length of IDs may change over time."
          example: msg_013Zva2CMHLNnXjNJJKqJ2EF
        type:
          title: Type
          enum:
            - message
          type: string
          description: "Object type.\n\nFor Messages, this is always `\"message\"`."
          default: message
        role:
          title: Role
          enum:
            - assistant
          type: string
          description: "Conversational role of the generated message.\n\nThis will always be `\"assistant\"`."
          default: assistant
        content:
          title: Content
          type: array
          items:
            $ref: '#/components/schemas/BetaContentBlock'
          description: "Content generated by the model.\n\nThis is an array of content blocks, each of which has a `type` that determines its shape.\n\nExample:\n\n```json\n[{\"type\": \"text\", \"text\": \"Hi, I'm Claude.\"}]\n```\n\nIf the request input `messages` ended with an `assistant` turn, then the response `content` will continue directly from that last turn. You can use this to constrain the model's output.\n\nFor example, if the input `messages` were:\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"}\n]\n```\n\nThen the response `content` might be:\n\n```json\n[{\"type\": \"text\", \"text\": \"B)\"}]\n```"
          example:
            - text: Hi! My name is Claude.
              type: text
        model:
          $ref: '#/components/schemas/Model'
        stop_reason:
          $ref: '#/components/schemas/BetaStopReason'
        stop_sequence:
          title: Stop Sequence
          type: string
          description: "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was generated."
          default: 
          nullable: true
        usage:
          allOf:
            - $ref: '#/components/schemas/BetaUsage'
          description: "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`."
          example:
            input_tokens: 2095
            output_tokens: 503
      example:
        content:
          - text: Hi! My name is Claude.
            type: text
        id: msg_013Zva2CMHLNnXjNJJKqJ2EF
        model: claude-3-7-sonnet-20250219
        role: assistant
        stop_reason: end_turn
        stop_sequence: 
        type: message
        usage:
          input_tokens: 2095
          output_tokens: 503
      x-stainless-python-custom-imports:
        - from .beta_content_block import BetaContentBlock as BetaContentBlock
    BetaMessageBatch:
      title: MessageBatch
      required:
        - archived_at
        - cancel_initiated_at
        - created_at
        - ended_at
        - expires_at
        - id
        - processing_status
        - request_counts
        - results_url
        - type
      type: object
      properties:
        archived_at:
          title: Archived At
          type: string
          description: RFC 3339 datetime string representing the time at which the Message Batch was archived and its results became unavailable.
          format: date-time
          nullable: true
          example: '2024-08-20T18:37:24.1004350+00:00'
        cancel_initiated_at:
          title: Cancel Initiated At
          type: string
          description: RFC 3339 datetime string representing the time at which cancellation was initiated for the Message Batch. Specified only if cancellation was initiated.
          format: date-time
          nullable: true
          example: '2024-08-20T18:37:24.1004350+00:00'
        created_at:
          title: Created At
          type: string
          description: RFC 3339 datetime string representing the time at which the Message Batch was created.
          format: date-time
          example: '2024-08-20T18:37:24.1004350+00:00'
        ended_at:
          title: Ended At
          type: string
          description: "RFC 3339 datetime string representing the time at which processing for the Message Batch ended. Specified only once processing ends.\n\nProcessing ends when every request in a Message Batch has either succeeded, errored, canceled, or expired."
          format: date-time
          nullable: true
          example: '2024-08-20T18:37:24.1004350+00:00'
        expires_at:
          title: Expires At
          type: string
          description: 'RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.'
          format: date-time
          example: '2024-08-20T18:37:24.1004350+00:00'
        id:
          title: Id
          type: string
          description: "Unique object identifier.\n\nThe format and length of IDs may change over time."
          example: msgbatch_013Zva2CMHLNnXjNJJKqJ2EF
        processing_status:
          title: Processing Status
          enum:
            - in_progress
            - canceling
            - ended
          type: string
          description: Processing status of the Message Batch.
        request_counts:
          allOf:
            - $ref: '#/components/schemas/BetaRequestCounts'
          description: "Tallies requests within the Message Batch, categorized by their status.\n\nRequests start as `processing` and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch."
        results_url:
          title: Results Url
          type: string
          description: "URL to a `.jsonl` file containing the results of the Message Batch requests. Specified only once processing ends.\n\nResults in the file are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests."
          nullable: true
          example: https://api.anthropic.com/v1/messages/batches/msgbatch_013Zva2CMHLNnXjNJJKqJ2EF/results
        type:
          title: Type
          enum:
            - message_batch
          type: string
          description: "Object type.\n\nFor Message Batches, this is always `\"message_batch\"`."
          default: message_batch
    BetaMessageBatchIndividualRequestParams:
      title: MessageBatchIndividualRequestParams
      required:
        - custom_id
        - params
      type: object
      properties:
        custom_id:
          title: Custom Id
          maxLength: 64
          minLength: 1
          pattern: '^[a-zA-Z0-9_-]{1,64}$'
          type: string
          description: "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch."
          example: my-custom-id-1
        params:
          allOf:
            - $ref: '#/components/schemas/BetaCreateMessageParams'
          description: "Messages API creation parameters for the individual request. \n\nSee the [Messages API reference](/en/api/messages) for full documentation on available parameters."
      additionalProperties: false
    BetaMessageBatchIndividualResponse:
      title: MessageBatchIndividualResponse
      required:
        - custom_id
        - result
      type: object
      properties:
        custom_id:
          title: Custom Id
          type: string
          description: "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch."
          example: my-custom-id-1
        result:
          title: Result
          oneOf:
            - $ref: '#/components/schemas/BetaSucceededResult'
            - $ref: '#/components/schemas/BetaErroredResult'
            - $ref: '#/components/schemas/BetaCanceledResult'
            - $ref: '#/components/schemas/BetaExpiredResult'
          description: "Processing result for this request.\n\nContains a Message output if processing was successful, an error response if processing failed, or the reason why processing was not attempted, such as cancellation or expiration."
          discriminator:
            propertyName: type
            mapping:
              canceled: '#/components/schemas/BetaCanceledResult'
              errored: '#/components/schemas/BetaErroredResult'
              expired: '#/components/schemas/BetaExpiredResult'
              succeeded: '#/components/schemas/BetaSucceededResult'
      description: This is a single line in the response `.jsonl` file and does not represent the response as a whole.
    BetaMessageDelta:
      title: MessageDelta
      required:
        - stop_reason
        - stop_sequence
      type: object
      properties:
        stop_reason:
          $ref: '#/components/schemas/BetaStopReason'
        stop_sequence:
          title: Stop Sequence
          type: string
          default: 
          nullable: true
    BetaMessageDeltaEvent:
      title: MessageDeltaEvent
      required:
        - delta
        - type
        - usage
      type: object
      properties:
        delta:
          $ref: '#/components/schemas/BetaMessageDelta'
        type:
          title: Type
          enum:
            - message_delta
          type: string
          default: message_delta
        usage:
          allOf:
            - $ref: '#/components/schemas/BetaMessageDeltaUsage'
          description: "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`."
          example:
            output_tokens: 503
    BetaMessageDeltaUsage:
      title: MessageDeltaUsage
      required:
        - cache_creation_input_tokens
        - cache_read_input_tokens
        - input_tokens
        - output_tokens
        - server_tool_use
      type: object
      properties:
        cache_creation_input_tokens:
          title: Cache Creation Input Tokens
          minimum: 0
          type: integer
          description: The cumulative number of input tokens used to create the cache entry.
          default: 
          nullable: true
          example: 2051
        cache_read_input_tokens:
          title: Cache Read Input Tokens
          minimum: 0
          type: integer
          description: The cumulative number of input tokens read from the cache.
          default: 
          nullable: true
          example: 2051
        input_tokens:
          title: Input Tokens
          minimum: 0
          type: integer
          description: The cumulative number of input tokens which were used.
          default: 
          nullable: true
          example: 2095
        output_tokens:
          title: Output Tokens
          type: integer
          description: The cumulative number of output tokens which were used.
          example: 503
        server_tool_use:
          $ref: '#/components/schemas/BetaServerToolUsage'
    BetaMessageStartEvent:
      title: MessageStartEvent
      required:
        - message
        - type
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BetaMessage'
        type:
          title: Type
          enum:
            - message_start
          type: string
          default: message_start
    BetaMessageStopEvent:
      title: MessageStopEvent
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - message_stop
          type: string
          default: message_stop
    BetaMessageStreamEvent:
      title: MessageStreamEvent
      oneOf:
        - $ref: '#/components/schemas/BetaMessageStartEvent'
        - $ref: '#/components/schemas/BetaMessageDeltaEvent'
        - $ref: '#/components/schemas/BetaMessageStopEvent'
        - $ref: '#/components/schemas/BetaContentBlockStartEvent'
        - $ref: '#/components/schemas/BetaContentBlockDeltaEvent'
        - $ref: '#/components/schemas/BetaContentBlockStopEvent'
      discriminator:
        propertyName: type
        mapping:
          content_block_delta: '#/components/schemas/BetaContentBlockDeltaEvent'
          content_block_start: '#/components/schemas/BetaContentBlockStartEvent'
          content_block_stop: '#/components/schemas/BetaContentBlockStopEvent'
          message_delta: '#/components/schemas/BetaMessageDeltaEvent'
          message_start: '#/components/schemas/BetaMessageStartEvent'
          message_stop: '#/components/schemas/BetaMessageStopEvent'
    BetaMetadata:
      title: Metadata
      type: object
      properties:
        user_id:
          title: User Id
          maxLength: 256
          type: string
          description: "An external identifier for the user who is associated with the request.\n\nThis should be a uuid, hash value, or other opaque identifier. Anthropic may use this id to help detect abuse. Do not include any identifying information such as name, email address, or phone number."
          nullable: true
          example: 13803d75-b4b5-4c3e-b2a2-6f21399b021b
      additionalProperties: false
    BetaModelInfo:
      title: ModelInfo
      required:
        - created_at
        - display_name
        - id
        - type
      type: object
      properties:
        created_at:
          title: Created At
          type: string
          description: RFC 3339 datetime string representing the time at which the model was released. May be set to an epoch value if the release date is unknown.
          format: date-time
          example: '2025-02-19T00:00:00.0000000+00:00'
        display_name:
          title: Display Name
          type: string
          description: A human-readable name for the model.
          example: Claude 3.7 Sonnet
        id:
          title: Id
          type: string
          description: Unique model identifier.
          example: claude-3-7-sonnet-20250219
        type:
          title: Type
          enum:
            - model
          type: string
          description: "Object type.\n\nFor Models, this is always `\"model\"`."
          default: model
    BetaNotFoundError:
      title: NotFoundError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Not found
        type:
          title: Type
          enum:
            - not_found_error
          type: string
          default: not_found_error
    BetaOverloadedError:
      title: OverloadedError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Overloaded
        type:
          title: Type
          enum:
            - overloaded_error
          type: string
          default: overloaded_error
    BetaPermissionError:
      title: PermissionError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Permission denied
        type:
          title: Type
          enum:
            - permission_error
          type: string
          default: permission_error
    BetaPlainTextSource:
      title: PlainTextSource
      required:
        - data
        - media_type
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
        media_type:
          title: Media Type
          enum:
            - text/plain
          type: string
        type:
          title: Type
          enum:
            - text
          type: string
      additionalProperties: false
    BetaRateLimitError:
      title: RateLimitError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Rate limited
        type:
          title: Type
          enum:
            - rate_limit_error
          type: string
          default: rate_limit_error
    BetaRequestCharLocationCitation:
      title: RequestCharLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_char_index
        - start_char_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        end_char_index:
          title: End Char Index
          type: integer
        start_char_index:
          title: Start Char Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - char_location
          type: string
      additionalProperties: false
    BetaRequestCitationsConfig:
      title: RequestCitationsConfig
      type: object
      properties:
        enabled:
          title: Enabled
          type: boolean
      additionalProperties: false
    BetaRequestContentBlockLocationCitation:
      title: RequestContentBlockLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_block_index
        - start_block_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        end_block_index:
          title: End Block Index
          type: integer
        start_block_index:
          title: Start Block Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - content_block_location
          type: string
      additionalProperties: false
    BetaRequestCounts:
      title: RequestCounts
      required:
        - canceled
        - errored
        - expired
        - processing
        - succeeded
      type: object
      properties:
        canceled:
          title: Canceled
          type: integer
          description: "Number of requests in the Message Batch that have been canceled.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 10
        errored:
          title: Errored
          type: integer
          description: "Number of requests in the Message Batch that encountered an error.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 30
        expired:
          title: Expired
          type: integer
          description: "Number of requests in the Message Batch that have expired.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 10
        processing:
          title: Processing
          type: integer
          description: Number of requests in the Message Batch that are processing.
          default: 0
          example: 100
        succeeded:
          title: Succeeded
          type: integer
          description: "Number of requests in the Message Batch that have completed successfully.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 50
    BetaRequestDocumentBlock:
      title: RequestDocumentBlock
      required:
        - source
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        citations:
          $ref: '#/components/schemas/BetaRequestCitationsConfig'
        context:
          title: Context
          minLength: 1
          type: string
          nullable: true
        source:
          title: Source
          oneOf:
            - $ref: '#/components/schemas/BetaBase64PDFSource'
            - $ref: '#/components/schemas/BetaPlainTextSource'
            - $ref: '#/components/schemas/BetaContentBlockSource'
            - $ref: '#/components/schemas/BetaURLPDFSource'
          discriminator:
            propertyName: type
            mapping:
              base64: '#/components/schemas/BetaBase64PDFSource'
              content: '#/components/schemas/BetaContentBlockSource'
              text: '#/components/schemas/BetaPlainTextSource'
              url: '#/components/schemas/BetaURLPDFSource'
        title:
          title: Title
          maxLength: 500
          minLength: 1
          type: string
          nullable: true
        type:
          title: Type
          enum:
            - document
          type: string
      additionalProperties: false
    BetaRequestImageBlock:
      title: RequestImageBlock
      required:
        - source
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        source:
          title: Source
          oneOf:
            - $ref: '#/components/schemas/BetaBase64ImageSource'
            - $ref: '#/components/schemas/BetaURLImageSource'
          discriminator:
            propertyName: type
            mapping:
              base64: '#/components/schemas/BetaBase64ImageSource'
              url: '#/components/schemas/BetaURLImageSource'
        type:
          title: Type
          enum:
            - image
          type: string
      additionalProperties: false
    BetaRequestPageLocationCitation:
      title: RequestPageLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_page_number
        - start_page_number
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        end_page_number:
          title: End Page Number
          type: integer
        start_page_number:
          title: Start Page Number
          minimum: 1
          type: integer
        type:
          title: Type
          enum:
            - page_location
          type: string
      additionalProperties: false
    BetaRequestRedactedThinkingBlock:
      title: RequestRedactedThinkingBlock
      required:
        - data
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
        type:
          title: Type
          enum:
            - redacted_thinking
          type: string
      additionalProperties: false
    BetaRequestServerToolUseBlock:
      title: RequestServerToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        id:
          title: Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          enum:
            - web_search
          type: string
        type:
          title: Type
          enum:
            - server_tool_use
          type: string
      additionalProperties: false
    BetaRequestTextBlock:
      title: RequestTextBlock
      required:
        - text
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        citations:
          title: Citations
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/BetaRequestCharLocationCitation'
              - $ref: '#/components/schemas/BetaRequestPageLocationCitation'
              - $ref: '#/components/schemas/BetaRequestContentBlockLocationCitation'
              - $ref: '#/components/schemas/BetaRequestWebSearchResultLocationCitation'
            discriminator:
              propertyName: type
              mapping:
                char_location: '#/components/schemas/BetaRequestCharLocationCitation'
                content_block_location: '#/components/schemas/BetaRequestContentBlockLocationCitation'
                page_location: '#/components/schemas/BetaRequestPageLocationCitation'
                web_search_result_location: '#/components/schemas/BetaRequestWebSearchResultLocationCitation'
          nullable: true
        text:
          title: Text
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - text
          type: string
      additionalProperties: false
    BetaRequestThinkingBlock:
      title: RequestThinkingBlock
      required:
        - signature
        - thinking
        - type
      type: object
      properties:
        signature:
          title: Signature
          type: string
        thinking:
          title: Thinking
          type: string
        type:
          title: Type
          enum:
            - thinking
          type: string
      additionalProperties: false
    BetaRequestToolResultBlock:
      title: RequestToolResultBlock
      required:
        - tool_use_id
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        content:
          title: Content
          anyOf:
            - type: string
              x-stainless-skip:
                - go
                - cli
            - type: array
              items:
                title: Block
                oneOf:
                  - $ref: '#/components/schemas/BetaRequestTextBlock'
                  - $ref: '#/components/schemas/BetaRequestImageBlock'
                discriminator:
                  propertyName: type
                  mapping:
                    image: '#/components/schemas/BetaRequestImageBlock'
                    text: '#/components/schemas/BetaRequestTextBlock'
              x-stainless-naming:
                python:
                  type_name: Content
                ruby:
                  type_name: Content
        is_error:
          title: Is Error
          type: boolean
        tool_use_id:
          title: Tool Use Id
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
        type:
          title: Type
          enum:
            - tool_result
          type: string
      additionalProperties: false
    BetaRequestToolUseBlock:
      title: RequestToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        id:
          title: Id
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          maxLength: 200
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - tool_use
          type: string
      additionalProperties: false
    BetaRequestWebSearchResultBlock:
      title: RequestWebSearchResultBlock
      required:
        - encrypted_content
        - title
        - type
        - url
      type: object
      properties:
        encrypted_content:
          title: Encrypted Content
          type: string
        page_age:
          title: Page Age
          type: string
          nullable: true
        title:
          title: Title
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - web_search_result
          type: string
        url:
          title: Url
          minLength: 1
          type: string
      additionalProperties: false
    BetaRequestWebSearchResultLocationCitation:
      title: RequestWebSearchResultLocationCitation
      required:
        - cited_text
        - encrypted_index
        - title
        - type
        - url
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        encrypted_index:
          title: Encrypted Index
          type: string
        title:
          title: Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        type:
          title: Type
          enum:
            - web_search_result_location
          type: string
        url:
          title: Url
          maxLength: 2048
          minLength: 1
          type: string
      additionalProperties: false
    BetaRequestWebSearchToolResultBlock:
      title: RequestWebSearchToolResultBlock
      required:
        - content
        - tool_use_id
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        content:
          title: Content
          anyOf:
            - title: beta_web_search_tool_result_block_item
              type: array
              items:
                $ref: '#/components/schemas/BetaRequestWebSearchResultBlock'
            - $ref: '#/components/schemas/BetaRequestWebSearchToolResultError'
        tool_use_id:
          title: Tool Use Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        type:
          title: Type
          enum:
            - web_search_tool_result
          type: string
      additionalProperties: false
    BetaRequestWebSearchToolResultError:
      title: RequestWebSearchToolResultError
      required:
        - error_code
        - type
      type: object
      properties:
        error_code:
          $ref: '#/components/schemas/BetaWebSearchToolResultErrorCode'
        type:
          title: Type
          enum:
            - web_search_tool_result_error
          type: string
      additionalProperties: false
    BetaResponseCharLocationCitation:
      title: ResponseCharLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_char_index
        - start_char_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          type: string
          nullable: true
        end_char_index:
          title: End Char Index
          type: integer
        start_char_index:
          title: Start Char Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - char_location
          type: string
          default: char_location
    BetaResponseContentBlockLocationCitation:
      title: ResponseContentBlockLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_block_index
        - start_block_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          type: string
          nullable: true
        end_block_index:
          title: End Block Index
          type: integer
        start_block_index:
          title: Start Block Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - content_block_location
          type: string
          default: content_block_location
    BetaResponsePageLocationCitation:
      title: ResponsePageLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_page_number
        - start_page_number
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          type: string
          nullable: true
        end_page_number:
          title: End Page Number
          type: integer
        start_page_number:
          title: Start Page Number
          minimum: 1
          type: integer
        type:
          title: Type
          enum:
            - page_location
          type: string
          default: page_location
    BetaResponseRedactedThinkingBlock:
      title: ResponseRedactedThinkingBlock
      required:
        - data
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
        type:
          title: Type
          enum:
            - redacted_thinking
          type: string
          default: redacted_thinking
    BetaResponseServerToolUseBlock:
      title: ResponseServerToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        id:
          title: Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          enum:
            - web_search
          type: string
        type:
          title: Type
          enum:
            - server_tool_use
          type: string
          default: server_tool_use
    BetaResponseTextBlock:
      title: ResponseTextBlock
      required:
        - citations
        - text
        - type
      type: object
      properties:
        citations:
          title: Citations
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/BetaResponseCharLocationCitation'
              - $ref: '#/components/schemas/BetaResponsePageLocationCitation'
              - $ref: '#/components/schemas/BetaResponseContentBlockLocationCitation'
              - $ref: '#/components/schemas/BetaResponseWebSearchResultLocationCitation'
            discriminator:
              propertyName: type
              mapping:
                char_location: '#/components/schemas/BetaResponseCharLocationCitation'
                content_block_location: '#/components/schemas/BetaResponseContentBlockLocationCitation'
                page_location: '#/components/schemas/BetaResponsePageLocationCitation'
                web_search_result_location: '#/components/schemas/BetaResponseWebSearchResultLocationCitation'
          description: "Citations supporting the text block.\n\nThe type of citation returned will depend on the type of document being cited. Citing a PDF results in `page_location`, plain text results in `char_location`, and content document results in `content_block_location`."
          default: 
          nullable: true
        text:
          title: Text
          maxLength: 5000000
          minLength: 0
          type: string
        type:
          title: Type
          enum:
            - text
          type: string
          default: text
    BetaResponseThinkingBlock:
      title: ResponseThinkingBlock
      required:
        - signature
        - thinking
        - type
      type: object
      properties:
        signature:
          title: Signature
          type: string
        thinking:
          title: Thinking
          type: string
        type:
          title: Type
          enum:
            - thinking
          type: string
          default: thinking
    BetaResponseToolUseBlock:
      title: ResponseToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        id:
          title: Id
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - tool_use
          type: string
          default: tool_use
    BetaResponseWebSearchResultBlock:
      title: ResponseWebSearchResultBlock
      required:
        - encrypted_content
        - page_age
        - title
        - type
        - url
      type: object
      properties:
        encrypted_content:
          title: Encrypted Content
          type: string
        page_age:
          title: Page Age
          type: string
          default: 
          nullable: true
        title:
          title: Title
          type: string
        type:
          title: Type
          enum:
            - web_search_result
          type: string
          default: web_search_result
        url:
          title: Url
          type: string
    BetaResponseWebSearchResultLocationCitation:
      title: ResponseWebSearchResultLocationCitation
      required:
        - cited_text
        - encrypted_index
        - title
        - type
        - url
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        encrypted_index:
          title: Encrypted Index
          type: string
        title:
          title: Title
          type: string
          nullable: true
        type:
          title: Type
          enum:
            - web_search_result_location
          type: string
          default: web_search_result_location
        url:
          title: Url
          type: string
    BetaResponseWebSearchToolResultBlock:
      title: ResponseWebSearchToolResultBlock
      required:
        - content
        - tool_use_id
        - type
      type: object
      properties:
        content:
          title: Content
          anyOf:
            - $ref: '#/components/schemas/BetaResponseWebSearchToolResultError'
            - type: array
              items:
                $ref: '#/components/schemas/BetaResponseWebSearchResultBlock'
        tool_use_id:
          title: Tool Use Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        type:
          title: Type
          enum:
            - web_search_tool_result
          type: string
          default: web_search_tool_result
    BetaResponseWebSearchToolResultError:
      title: ResponseWebSearchToolResultError
      required:
        - error_code
        - type
      type: object
      properties:
        error_code:
          $ref: '#/components/schemas/BetaWebSearchToolResultErrorCode'
        type:
          title: Type
          enum:
            - web_search_tool_result_error
          type: string
          default: web_search_tool_result_error
    BetaServerToolUsage:
      title: ServerToolUsage
      required:
        - web_search_requests
      type: object
      properties:
        web_search_requests:
          title: Web Search Requests
          minimum: 0
          type: integer
          description: The number of web search tool requests.
          default: 0
          example: 0
    BetaSignatureContentBlockDelta:
      title: SignatureContentBlockDelta
      required:
        - signature
        - type
      type: object
      properties:
        signature:
          title: Signature
          type: string
        type:
          title: Type
          enum:
            - signature_delta
          type: string
          default: signature_delta
    BetaSucceededResult:
      title: SucceededResult
      required:
        - message
        - type
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BetaMessage'
        type:
          title: Type
          enum:
            - succeeded
          type: string
          default: succeeded
    BetaTextContentBlockDelta:
      title: TextContentBlockDelta
      required:
        - text
        - type
      type: object
      properties:
        text:
          title: Text
          type: string
        type:
          title: Type
          enum:
            - text_delta
          type: string
          default: text_delta
    BetaTextEditor_20241022:
      title: TextEditor_20241022
      required:
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        name:
          title: Name
          enum:
            - str_replace_editor
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - text_editor_20241022
          type: string
      additionalProperties: false
    BetaTextEditor_20250124:
      title: TextEditor_20250124
      required:
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        name:
          title: Name
          enum:
            - str_replace_editor
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - text_editor_20250124
          type: string
      additionalProperties: false
    BetaThinkingConfigDisabled:
      title: ThinkingConfigDisabled
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - disabled
          type: string
      additionalProperties: false
    BetaThinkingConfigEnabled:
      title: ThinkingConfigEnabled
      required:
        - budget_tokens
        - type
      type: object
      properties:
        budget_tokens:
          title: Budget Tokens
          minimum: 1024
          type: integer
          description: "Determines how many tokens Claude can use for its internal reasoning process. Larger budgets can enable more thorough analysis for complex problems, improving response quality. \n\nMust be ≥1024 and less than `max_tokens`.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details."
        type:
          title: Type
          enum:
            - enabled
          type: string
      additionalProperties: false
    BetaThinkingContentBlockDelta:
      title: ThinkingContentBlockDelta
      required:
        - thinking
        - type
      type: object
      properties:
        thinking:
          title: Thinking
          type: string
        type:
          title: Type
          enum:
            - thinking_delta
          type: string
          default: thinking_delta
    BetaTool:
      title: Tool
      required:
        - name
        - input_schema
      type: object
      properties:
        type:
          title: Type
          enum:
            - custom
          type: string
          nullable: true
        description:
          title: Description
          type: string
          description: "Description of what this tool does.\n\nTool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema."
          example: Get the current weather in a given location
        name:
          title: Name
          maxLength: 64
          minLength: 1
          pattern: '^[a-zA-Z0-9_-]{1,64}$'
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        input_schema:
          type: object
          description: "[JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n\nThis defines the shape of the `input` that your tool accepts and that the model will produce."
          example:
            properties:
              location:
                description: 'The city and state, e.g. San Francisco, CA'
                type: string
              unit:
                description: 'Unit for the output - one of (celsius, fahrenheit)'
                type: string
            required:
              - location
            type: object
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
      additionalProperties: false
    BetaToolChoiceAny:
      title: ToolChoiceAny
      required:
        - type
      type: object
      properties:
        disable_parallel_tool_use:
          title: Disable Parallel Tool Use
          type: boolean
          description: "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use."
        type:
          title: Type
          enum:
            - any
          type: string
      additionalProperties: false
      description: The model will use any available tools.
    BetaToolChoiceAuto:
      title: ToolChoiceAuto
      required:
        - type
      type: object
      properties:
        disable_parallel_tool_use:
          title: Disable Parallel Tool Use
          type: boolean
          description: "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output at most one tool use."
        type:
          title: Type
          enum:
            - auto
          type: string
      additionalProperties: false
      description: The model will automatically decide whether to use tools.
    BetaToolChoiceNone:
      title: ToolChoiceNone
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - none
          type: string
      additionalProperties: false
      description: The model will not be allowed to use tools.
    BetaToolChoiceTool:
      title: ToolChoiceTool
      required:
        - name
        - type
      type: object
      properties:
        disable_parallel_tool_use:
          title: Disable Parallel Tool Use
          type: boolean
          description: "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use."
        name:
          title: Name
          type: string
          description: The name of the tool to use.
        type:
          title: Type
          enum:
            - tool
          type: string
      additionalProperties: false
      description: The model will use the specified tool with `tool_choice.name`.
    BetaURLImageSource:
      title: URLImageSource
      required:
        - type
        - url
      type: object
      properties:
        type:
          title: Type
          enum:
            - url
          type: string
        url:
          title: Url
          type: string
      additionalProperties: false
    BetaURLPDFSource:
      title: URLPDFSource
      required:
        - type
        - url
      type: object
      properties:
        type:
          title: Type
          enum:
            - url
          type: string
        url:
          title: Url
          type: string
      additionalProperties: false
    BetaUsage:
      title: Usage
      required:
        - cache_creation_input_tokens
        - cache_read_input_tokens
        - input_tokens
        - output_tokens
        - server_tool_use
      type: object
      properties:
        cache_creation_input_tokens:
          title: Cache Creation Input Tokens
          minimum: 0
          type: integer
          description: The number of input tokens used to create the cache entry.
          default: 
          nullable: true
          example: 2051
        cache_read_input_tokens:
          title: Cache Read Input Tokens
          minimum: 0
          type: integer
          description: The number of input tokens read from the cache.
          default: 
          nullable: true
          example: 2051
        input_tokens:
          title: Input Tokens
          minimum: 0
          type: integer
          description: The number of input tokens which were used.
          example: 2095
        output_tokens:
          title: Output Tokens
          minimum: 0
          type: integer
          description: The number of output tokens which were used.
          example: 503
        server_tool_use:
          $ref: '#/components/schemas/BetaServerToolUsage'
    BetaUserLocation:
      title: UserLocation
      required:
        - type
      type: object
      properties:
        city:
          title: City
          maxLength: 255
          minLength: 1
          type: string
          description: The city of the user.
          nullable: true
          example: New York
        country:
          title: Country
          maxLength: 2
          minLength: 2
          type: string
          description: 'The two letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the user.'
          nullable: true
          example: US
        region:
          title: Region
          maxLength: 255
          minLength: 1
          type: string
          description: The region of the user.
          nullable: true
          example: California
        timezone:
          title: Timezone
          maxLength: 255
          minLength: 1
          type: string
          description: 'The [IANA timezone](https://nodatime.org/TimeZones) of the user.'
          nullable: true
          example: America/New_York
        type:
          title: Type
          enum:
            - approximate
          type: string
      additionalProperties: false
    BetaWebSearchToolResultErrorCode:
      title: WebSearchToolResultErrorCode
      enum:
        - invalid_tool_input
        - unavailable
        - max_uses_exceeded
        - too_many_requests
        - query_too_long
      type: string
    BetaWebSearchTool_20250305:
      title: WebSearchTool_20250305
      required:
        - name
        - type
      type: object
      properties:
        allowed_domains:
          title: Allowed Domains
          type: array
          items:
            type: string
          description: 'If provided, only these domains will be included in results. Cannot be used alongside `blocked_domains`.'
          nullable: true
        blocked_domains:
          title: Blocked Domains
          type: array
          items:
            type: string
          description: 'If provided, these domains will never appear in results. Cannot be used alongside `allowed_domains`.'
          nullable: true
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/BetaCacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/BetaCacheControlEphemeral'
        max_uses:
          title: Max Uses
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Maximum number of times the tool can be used in the API request.
          nullable: true
        name:
          title: Name
          enum:
            - web_search
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - web_search_20250305
          type: string
        user_location:
          $ref: '#/components/schemas/BetaUserLocation'
      additionalProperties: false
    BillingError:
      title: BillingError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Billing error
        type:
          title: Type
          enum:
            - billing_error
          type: string
          default: billing_error
    CacheControlEphemeral:
      title: CacheControlEphemeral
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - ephemeral
          type: string
      additionalProperties: false
    CanceledResult:
      title: CanceledResult
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - canceled
          type: string
          default: canceled
    CitationsDelta:
      title: CitationsDelta
      required:
        - citation
        - type
      type: object
      properties:
        citation:
          title: Citation
          oneOf:
            - $ref: '#/components/schemas/ResponseCharLocationCitation'
            - $ref: '#/components/schemas/ResponsePageLocationCitation'
            - $ref: '#/components/schemas/ResponseContentBlockLocationCitation'
            - $ref: '#/components/schemas/ResponseWebSearchResultLocationCitation'
          discriminator:
            propertyName: type
            mapping:
              char_location: '#/components/schemas/ResponseCharLocationCitation'
              content_block_location: '#/components/schemas/ResponseContentBlockLocationCitation'
              page_location: '#/components/schemas/ResponsePageLocationCitation'
              web_search_result_location: '#/components/schemas/ResponseWebSearchResultLocationCitation'
        type:
          title: Type
          enum:
            - citations_delta
          type: string
          default: citations_delta
    CompletionRequest:
      title: CompletionRequest
      required:
        - max_tokens_to_sample
        - model
        - prompt
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        prompt:
          title: Prompt
          minLength: 1
          type: string
          description: "The prompt that you want Claude to complete.\n\nFor proper response generation you will need to format your prompt using alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n```\n\"\\n\\nHuman: {userQuestion}\\n\\nAssistant:\"\n```\n\nSee [prompt validation](https://docs.anthropic.com/en/api/prompt-validation) and our guide to [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more details."
          example: "\n\nHuman: Hello, world!\n\nAssistant:"
        max_tokens_to_sample:
          title: Max Tokens To Sample
          minimum: 1
          type: integer
          description: "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate."
          example: 256
        stop_sequences:
          title: Stop Sequences
          type: array
          items:
            type: string
          description: "Sequences that will cause the model to stop generating.\n\nOur models stop on `\"\\n\\nHuman:\"`, and may include additional built-in stop sequences in the future. By providing the stop_sequences parameter, you may include additional strings that will cause the model to stop generating."
        temperature:
          title: Temperature
          maximum: 1
          minimum: 0
          type: number
          description: "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic."
          example: 1
        top_p:
          title: Top P
          maximum: 1
          minimum: 0
          type: number
          description: "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 0.7
        top_k:
          title: Top K
          minimum: 0
          type: integer
          description: "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 5
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: An object describing metadata about the request.
        stream:
          title: Stream
          type: boolean
          description: "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/streaming) for details."
      additionalProperties: false
      example:
        model: claude-2.1
        prompt: "\n\nHuman: Hello, world!\n\nAssistant:"
        max_tokens_to_sample: 256
    CompletionResponse:
      title: CompletionResponse
      required:
        - completion
        - id
        - model
        - stop_reason
        - type
      type: object
      properties:
        completion:
          title: Completion
          type: string
          description: The resulting completion up to and excluding the stop sequences.
          example: ' Hello! My name is Claude.'
        id:
          title: Id
          type: string
          description: "Unique object identifier.\n\nThe format and length of IDs may change over time."
        model:
          $ref: '#/components/schemas/Model'
        stop_reason:
          title: Stop Reason
          type: string
          description: "The reason that we stopped.\n\nThis may be one the following values:\n* `\"stop_sequence\"`: we reached a stop sequence — either provided by you via the `stop_sequences` parameter, or a stop sequence built into the model\n* `\"max_tokens\"`: we exceeded `max_tokens_to_sample` or the model's maximum"
          nullable: true
          example: stop_sequence
        type:
          title: Type
          enum:
            - completion
          type: string
          description: "Object type.\n\nFor Text Completions, this is always `\"completion\"`."
          default: completion
      example:
        completion: ' Hello! My name is Claude.'
        id: compl_018CKm6gsux7P8yMcwZbeCPw
        model: claude-2.1
        stop_reason: stop_sequence
        type: completion
    ContentBlockDeltaEvent:
      title: ContentBlockDeltaEvent
      required:
        - delta
        - index
        - type
      type: object
      properties:
        delta:
          title: Delta
          oneOf:
            - $ref: '#/components/schemas/TextContentBlockDelta'
            - $ref: '#/components/schemas/InputJsonContentBlockDelta'
            - $ref: '#/components/schemas/CitationsDelta'
            - $ref: '#/components/schemas/ThinkingContentBlockDelta'
            - $ref: '#/components/schemas/SignatureContentBlockDelta'
          discriminator:
            propertyName: type
            mapping:
              citations_delta: '#/components/schemas/CitationsDelta'
              input_json_delta: '#/components/schemas/InputJsonContentBlockDelta'
              signature_delta: '#/components/schemas/SignatureContentBlockDelta'
              text_delta: '#/components/schemas/TextContentBlockDelta'
              thinking_delta: '#/components/schemas/ThinkingContentBlockDelta'
        index:
          title: Index
          type: integer
        type:
          title: Type
          enum:
            - content_block_delta
          type: string
          default: content_block_delta
      x-stainless-naming:
        go:
          model_name: ContentBlockDeltaEvent
    ContentBlockSource:
      title: ContentBlockSource
      required:
        - content
        - type
      type: object
      properties:
        content:
          title: Content
          anyOf:
            - type: string
            - title: content_block_source_content
              type: array
              items:
                title: content_block_source_content_item
                oneOf:
                  - $ref: '#/components/schemas/RequestTextBlock'
                  - $ref: '#/components/schemas/RequestImageBlock'
                discriminator:
                  propertyName: type
                  mapping:
                    image: '#/components/schemas/RequestImageBlock'
                    text: '#/components/schemas/RequestTextBlock'
        type:
          title: Type
          enum:
            - content
          type: string
      additionalProperties: false
    ContentBlockStartEvent:
      title: ContentBlockStartEvent
      required:
        - content_block
        - index
        - type
      type: object
      properties:
        content_block:
          title: Content Block
          oneOf:
            - $ref: '#/components/schemas/ResponseTextBlock'
            - $ref: '#/components/schemas/ResponseToolUseBlock'
            - $ref: '#/components/schemas/ResponseServerToolUseBlock'
            - $ref: '#/components/schemas/ResponseWebSearchToolResultBlock'
            - $ref: '#/components/schemas/ResponseThinkingBlock'
            - $ref: '#/components/schemas/ResponseRedactedThinkingBlock'
          discriminator:
            propertyName: type
            mapping:
              redacted_thinking: '#/components/schemas/ResponseRedactedThinkingBlock'
              server_tool_use: '#/components/schemas/ResponseServerToolUseBlock'
              text: '#/components/schemas/ResponseTextBlock'
              thinking: '#/components/schemas/ResponseThinkingBlock'
              tool_use: '#/components/schemas/ResponseToolUseBlock'
              web_search_tool_result: '#/components/schemas/ResponseWebSearchToolResultBlock'
        index:
          title: Index
          type: integer
        type:
          title: Type
          enum:
            - content_block_start
          type: string
          default: content_block_start
      x-stainless-naming:
        go:
          model_name: ContentBlockStartEvent
    ContentBlockStopEvent:
      title: ContentBlockStopEvent
      required:
        - index
        - type
      type: object
      properties:
        index:
          title: Index
          type: integer
        type:
          title: Type
          enum:
            - content_block_stop
          type: string
          default: content_block_stop
      x-stainless-naming:
        go:
          model_name: ContentBlockStopEvent
    CountMessageTokensParams:
      title: CountMessageTokensParams
      required:
        - messages
        - model
      type: object
      properties:
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/InputMessage'
          description: "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100000 messages in a single request."
        model:
          $ref: '#/components/schemas/Model'
        system:
          title: System
          anyOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/RequestTextBlock'
          description: "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts)."
          example:
            - text: Today's date is 2024-06-01.
              type: text
        thinking:
          $ref: '#/components/schemas/ThinkingConfigParam'
        tool_choice:
          $ref: '#/components/schemas/ToolChoice'
        tools:
          title: Tools
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Tool'
              - $ref: '#/components/schemas/BashTool_20250124'
              - $ref: '#/components/schemas/TextEditor_20250124'
              - $ref: '#/components/schemas/WebSearchTool_20250305'
          description: "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details."
          example:
            description: Get the current weather in a given location
            input_schema:
              properties:
                location:
                  description: 'The city and state, e.g. San Francisco, CA'
                  type: string
                unit:
                  description: 'Unit for the output - one of (celsius, fahrenheit)'
                  type: string
              required:
                - location
              type: object
            name: get_weather
      additionalProperties: false
      example:
        messages:
          - content: 'Hello, world'
            role: user
        model: claude-3-7-sonnet-20250219
    CountMessageTokensResponse:
      title: CountMessageTokensResponse
      required:
        - input_tokens
      type: object
      properties:
        input_tokens:
          title: Input Tokens
          type: integer
          description: 'The total number of tokens across the provided list of messages, system prompt, and tools.'
          example: 2095
      example:
        input_tokens: 2095
    CreateMessageBatchParams:
      title: CreateMessageBatchParams
      required:
        - requests
      type: object
      properties:
        requests:
          title: Requests
          maxItems: 10000
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/MessageBatchIndividualRequestParams'
          description: List of requests for prompt completion. Each is an individual request to create a Message.
      additionalProperties: false
    CreateMessageParams:
      title: CreateMessageParams
      required:
        - model
        - messages
        - max_tokens
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/InputMessage'
          description: "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100000 messages in a single request."
        max_tokens:
          title: Max Tokens
          minimum: 1
          type: integer
          description: "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details."
          example: 1024
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: An object describing metadata about the request.
        stop_sequences:
          title: Stop Sequences
          type: array
          items:
            type: string
          description: "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence."
        stream:
          title: Stream
          type: boolean
          description: "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/messages-streaming) for details."
        system:
          title: System
          anyOf:
            - type: string
              x-stainless-skip:
                - go
                - cli
            - type: array
              items:
                $ref: '#/components/schemas/RequestTextBlock'
          description: "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts)."
          example:
            - text: Today's date is 2024-06-01.
              type: text
        temperature:
          title: Temperature
          maximum: 1
          minimum: 0
          type: number
          description: "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic."
          example: 1
        thinking:
          $ref: '#/components/schemas/ThinkingConfigParam'
        tool_choice:
          $ref: '#/components/schemas/ToolChoice'
        tools:
          title: Tools
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Tool'
              - $ref: '#/components/schemas/BashTool_20250124'
              - $ref: '#/components/schemas/TextEditor_20250124'
              - $ref: '#/components/schemas/WebSearchTool_20250305'
          description: "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details."
          example:
            description: Get the current weather in a given location
            input_schema:
              properties:
                location:
                  description: 'The city and state, e.g. San Francisco, CA'
                  type: string
                unit:
                  description: 'Unit for the output - one of (celsius, fahrenheit)'
                  type: string
              required:
                - location
              type: object
            name: get_weather
        top_k:
          title: Top K
          minimum: 0
          type: integer
          description: "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 5
        top_p:
          title: Top P
          maximum: 1
          minimum: 0
          type: number
          description: "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 0.7
      additionalProperties: false
      example:
        max_tokens: 1024
        messages:
          - content: 'Hello, world'
            role: user
        model: claude-3-7-sonnet-20250219
    DeleteMessageBatchResponse:
      title: DeleteMessageBatchResponse
      required:
        - id
        - type
      type: object
      properties:
        id:
          title: Id
          type: string
          description: ID of the Message Batch.
          example: msgbatch_013Zva2CMHLNnXjNJJKqJ2EF
        type:
          title: Type
          enum:
            - message_batch_deleted
          type: string
          description: "Deleted object type.\n\nFor Message Batches, this is always `\"message_batch_deleted\"`."
          default: message_batch_deleted
    ErrorResponse:
      title: ErrorResponse
      required:
        - error
        - type
      type: object
      properties:
        error:
          title: Error
          oneOf:
            - $ref: '#/components/schemas/InvalidRequestError'
            - $ref: '#/components/schemas/AuthenticationError'
            - $ref: '#/components/schemas/BillingError'
            - $ref: '#/components/schemas/PermissionError'
            - $ref: '#/components/schemas/NotFoundError'
            - $ref: '#/components/schemas/RateLimitError'
            - $ref: '#/components/schemas/GatewayTimeoutError'
            - $ref: '#/components/schemas/APIError'
            - $ref: '#/components/schemas/OverloadedError'
          discriminator:
            propertyName: type
            mapping:
              api_error: '#/components/schemas/APIError'
              authentication_error: '#/components/schemas/AuthenticationError'
              billing_error: '#/components/schemas/BillingError'
              invalid_request_error: '#/components/schemas/InvalidRequestError'
              not_found_error: '#/components/schemas/NotFoundError'
              overloaded_error: '#/components/schemas/OverloadedError'
              permission_error: '#/components/schemas/PermissionError'
              rate_limit_error: '#/components/schemas/RateLimitError'
              timeout_error: '#/components/schemas/GatewayTimeoutError'
        type:
          title: Type
          enum:
            - error
          type: string
          default: error
    ErroredResult:
      title: ErroredResult
      required:
        - error
        - type
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorResponse'
        type:
          title: Type
          enum:
            - errored
          type: string
          default: errored
    ExpiredResult:
      title: ExpiredResult
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - expired
          type: string
          default: expired
    GatewayTimeoutError:
      title: GatewayTimeoutError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Request timeout
        type:
          title: Type
          enum:
            - timeout_error
          type: string
          default: timeout_error
    InputJsonContentBlockDelta:
      title: InputJsonContentBlockDelta
      required:
        - partial_json
        - type
      type: object
      properties:
        partial_json:
          title: Partial Json
          type: string
        type:
          title: Type
          enum:
            - input_json_delta
          type: string
          default: input_json_delta
    InputMessage:
      title: InputMessage
      required:
        - content
        - role
      type: object
      properties:
        content:
          title: Content
          anyOf:
            - type: string
              x-stainless-skip:
                - go
                - cli
            - type: array
              items:
                $ref: '#/components/schemas/InputContentBlock'
              example:
                - type: text
                  text: What is a quaternion?
        role:
          title: Role
          enum:
            - user
            - assistant
          type: string
      additionalProperties: false
    InputSchema:
      title: InputSchema
      required:
        - type
      type: object
      properties:
        properties:
          title: Properties
          type: object
          nullable: true
        type:
          title: Type
          enum:
            - object
          type: string
    InvalidRequestError:
      title: InvalidRequestError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Invalid request
        type:
          title: Type
          enum:
            - invalid_request_error
          type: string
          default: invalid_request_error
    ListResponse_MessageBatch_:
      title: 'ListResponse[MessageBatch]'
      required:
        - data
        - first_id
        - has_more
        - last_id
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/MessageBatch'
        first_id:
          title: First Id
          type: string
          description: First ID in the `data` list. Can be used as the `before_id` for the previous page.
          nullable: true
        has_more:
          title: Has More
          type: boolean
          description: Indicates if there are more results in the requested page direction.
        last_id:
          title: Last Id
          type: string
          description: Last ID in the `data` list. Can be used as the `after_id` for the next page.
          nullable: true
    ListResponse_ModelInfo_:
      title: 'ListResponse[ModelInfo]'
      required:
        - data
        - first_id
        - has_more
        - last_id
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/ModelInfo'
        first_id:
          title: First Id
          type: string
          description: First ID in the `data` list. Can be used as the `before_id` for the previous page.
          nullable: true
        has_more:
          title: Has More
          type: boolean
          description: Indicates if there are more results in the requested page direction.
        last_id:
          title: Last Id
          type: string
          description: Last ID in the `data` list. Can be used as the `after_id` for the next page.
          nullable: true
    Message:
      title: Message
      required:
        - id
        - type
        - role
        - content
        - model
        - stop_reason
        - stop_sequence
        - usage
      type: object
      properties:
        id:
          title: Id
          type: string
          description: "Unique object identifier.\n\nThe format and length of IDs may change over time."
          example: msg_013Zva2CMHLNnXjNJJKqJ2EF
        type:
          title: Type
          enum:
            - message
          type: string
          description: "Object type.\n\nFor Messages, this is always `\"message\"`."
          default: message
        role:
          title: Role
          enum:
            - assistant
          type: string
          description: "Conversational role of the generated message.\n\nThis will always be `\"assistant\"`."
          default: assistant
        content:
          title: Content
          type: array
          items:
            $ref: '#/components/schemas/ContentBlock'
          description: "Content generated by the model.\n\nThis is an array of content blocks, each of which has a `type` that determines its shape.\n\nExample:\n\n```json\n[{\"type\": \"text\", \"text\": \"Hi, I'm Claude.\"}]\n```\n\nIf the request input `messages` ended with an `assistant` turn, then the response `content` will continue directly from that last turn. You can use this to constrain the model's output.\n\nFor example, if the input `messages` were:\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"}\n]\n```\n\nThen the response `content` might be:\n\n```json\n[{\"type\": \"text\", \"text\": \"B)\"}]\n```"
          example:
            - text: Hi! My name is Claude.
              type: text
        model:
          $ref: '#/components/schemas/Model'
        stop_reason:
          $ref: '#/components/schemas/StopReason'
        stop_sequence:
          title: Stop Sequence
          type: string
          description: "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was generated."
          default: 
          nullable: true
        usage:
          allOf:
            - $ref: '#/components/schemas/Usage'
          description: "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`."
          example:
            input_tokens: 2095
            output_tokens: 503
      example:
        content:
          - text: Hi! My name is Claude.
            type: text
        id: msg_013Zva2CMHLNnXjNJJKqJ2EF
        model: claude-3-7-sonnet-20250219
        role: assistant
        stop_reason: end_turn
        stop_sequence: 
        type: message
        usage:
          input_tokens: 2095
          output_tokens: 503
      x-stainless-python-custom-imports:
        - from .content_block import ContentBlock as ContentBlock
    MessageBatch:
      title: MessageBatch
      required:
        - archived_at
        - cancel_initiated_at
        - created_at
        - ended_at
        - expires_at
        - id
        - processing_status
        - request_counts
        - results_url
        - type
      type: object
      properties:
        archived_at:
          title: Archived At
          type: string
          description: RFC 3339 datetime string representing the time at which the Message Batch was archived and its results became unavailable.
          format: date-time
          nullable: true
          example: '2024-08-20T18:37:24.1004350+00:00'
        cancel_initiated_at:
          title: Cancel Initiated At
          type: string
          description: RFC 3339 datetime string representing the time at which cancellation was initiated for the Message Batch. Specified only if cancellation was initiated.
          format: date-time
          nullable: true
          example: '2024-08-20T18:37:24.1004350+00:00'
        created_at:
          title: Created At
          type: string
          description: RFC 3339 datetime string representing the time at which the Message Batch was created.
          format: date-time
          example: '2024-08-20T18:37:24.1004350+00:00'
        ended_at:
          title: Ended At
          type: string
          description: "RFC 3339 datetime string representing the time at which processing for the Message Batch ended. Specified only once processing ends.\n\nProcessing ends when every request in a Message Batch has either succeeded, errored, canceled, or expired."
          format: date-time
          nullable: true
          example: '2024-08-20T18:37:24.1004350+00:00'
        expires_at:
          title: Expires At
          type: string
          description: 'RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.'
          format: date-time
          example: '2024-08-20T18:37:24.1004350+00:00'
        id:
          title: Id
          type: string
          description: "Unique object identifier.\n\nThe format and length of IDs may change over time."
          example: msgbatch_013Zva2CMHLNnXjNJJKqJ2EF
        processing_status:
          title: Processing Status
          enum:
            - in_progress
            - canceling
            - ended
          type: string
          description: Processing status of the Message Batch.
        request_counts:
          allOf:
            - $ref: '#/components/schemas/RequestCounts'
          description: "Tallies requests within the Message Batch, categorized by their status.\n\nRequests start as `processing` and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch."
        results_url:
          title: Results Url
          type: string
          description: "URL to a `.jsonl` file containing the results of the Message Batch requests. Specified only once processing ends.\n\nResults in the file are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests."
          nullable: true
          example: https://api.anthropic.com/v1/messages/batches/msgbatch_013Zva2CMHLNnXjNJJKqJ2EF/results
        type:
          title: Type
          enum:
            - message_batch
          type: string
          description: "Object type.\n\nFor Message Batches, this is always `\"message_batch\"`."
          default: message_batch
    MessageBatchIndividualRequestParams:
      title: MessageBatchIndividualRequestParams
      required:
        - custom_id
        - params
      type: object
      properties:
        custom_id:
          title: Custom Id
          maxLength: 64
          minLength: 1
          pattern: '^[a-zA-Z0-9_-]{1,64}$'
          type: string
          description: "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch."
          example: my-custom-id-1
        params:
          allOf:
            - $ref: '#/components/schemas/CreateMessageParams'
          description: "Messages API creation parameters for the individual request. \n\nSee the [Messages API reference](/en/api/messages) for full documentation on available parameters."
      additionalProperties: false
    MessageBatchIndividualResponse:
      title: MessageBatchIndividualResponse
      required:
        - custom_id
        - result
      type: object
      properties:
        custom_id:
          title: Custom Id
          type: string
          description: "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch."
          example: my-custom-id-1
        result:
          title: Result
          oneOf:
            - $ref: '#/components/schemas/SucceededResult'
            - $ref: '#/components/schemas/ErroredResult'
            - $ref: '#/components/schemas/CanceledResult'
            - $ref: '#/components/schemas/ExpiredResult'
          description: "Processing result for this request.\n\nContains a Message output if processing was successful, an error response if processing failed, or the reason why processing was not attempted, such as cancellation or expiration."
          discriminator:
            propertyName: type
            mapping:
              canceled: '#/components/schemas/CanceledResult'
              errored: '#/components/schemas/ErroredResult'
              expired: '#/components/schemas/ExpiredResult'
              succeeded: '#/components/schemas/SucceededResult'
      description: This is a single line in the response `.jsonl` file and does not represent the response as a whole.
    MessageDelta:
      title: MessageDelta
      required:
        - stop_reason
        - stop_sequence
      type: object
      properties:
        stop_reason:
          $ref: '#/components/schemas/StopReason'
        stop_sequence:
          title: Stop Sequence
          type: string
          default: 
          nullable: true
    MessageDeltaEvent:
      title: MessageDeltaEvent
      required:
        - delta
        - type
        - usage
      type: object
      properties:
        delta:
          $ref: '#/components/schemas/MessageDelta'
        type:
          title: Type
          enum:
            - message_delta
          type: string
          default: message_delta
        usage:
          allOf:
            - $ref: '#/components/schemas/MessageDeltaUsage'
          description: "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`."
          example:
            output_tokens: 503
      x-stainless-naming:
        go:
          model_name: MessageDeltaEvent
    MessageDeltaUsage:
      title: MessageDeltaUsage
      required:
        - cache_creation_input_tokens
        - cache_read_input_tokens
        - input_tokens
        - output_tokens
        - server_tool_use
      type: object
      properties:
        cache_creation_input_tokens:
          title: Cache Creation Input Tokens
          minimum: 0
          type: integer
          description: The cumulative number of input tokens used to create the cache entry.
          default: 
          nullable: true
          example: 2051
        cache_read_input_tokens:
          title: Cache Read Input Tokens
          minimum: 0
          type: integer
          description: The cumulative number of input tokens read from the cache.
          default: 
          nullable: true
          example: 2051
        input_tokens:
          title: Input Tokens
          minimum: 0
          type: integer
          description: The cumulative number of input tokens which were used.
          default: 
          nullable: true
          example: 2095
        output_tokens:
          title: Output Tokens
          type: integer
          description: The cumulative number of output tokens which were used.
          example: 503
        server_tool_use:
          $ref: '#/components/schemas/ServerToolUsage'
    MessageStartEvent:
      title: MessageStartEvent
      required:
        - message
        - type
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Message'
        type:
          title: Type
          enum:
            - message_start
          type: string
          default: message_start
      x-stainless-naming:
        go:
          model_name: MessageStartEvent
    MessageStopEvent:
      title: MessageStopEvent
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - message_stop
          type: string
          default: message_stop
      x-stainless-naming:
        go:
          model_name: MessageStopEvent
    MessageStreamEvent:
      title: MessageStreamEvent
      oneOf:
        - $ref: '#/components/schemas/MessageStartEvent'
        - $ref: '#/components/schemas/MessageDeltaEvent'
        - $ref: '#/components/schemas/MessageStopEvent'
        - $ref: '#/components/schemas/ContentBlockStartEvent'
        - $ref: '#/components/schemas/ContentBlockDeltaEvent'
        - $ref: '#/components/schemas/ContentBlockStopEvent'
        - $ref: '#/components/schemas/Ping'
      discriminator:
        propertyName: type
        mapping:
          content_block_delta: '#/components/schemas/ContentBlockDeltaEvent'
          content_block_start: '#/components/schemas/ContentBlockStartEvent'
          content_block_stop: '#/components/schemas/ContentBlockStopEvent'
          message_delta: '#/components/schemas/MessageDeltaEvent'
          message_start: '#/components/schemas/MessageStartEvent'
          message_stop: '#/components/schemas/MessageStopEvent'
      x-stainless-naming:
        go:
          model_name: MessageStreamEvent
    Metadata:
      title: Metadata
      type: object
      properties:
        user_id:
          title: User Id
          maxLength: 256
          type: string
          description: "An external identifier for the user who is associated with the request.\n\nThis should be a uuid, hash value, or other opaque identifier. Anthropic may use this id to help detect abuse. Do not include any identifying information such as name, email address, or phone number."
          nullable: true
          example: 13803d75-b4b5-4c3e-b2a2-6f21399b021b
      additionalProperties: false
    ModelInfo:
      title: ModelInfo
      required:
        - created_at
        - display_name
        - id
        - type
      type: object
      properties:
        created_at:
          title: Created At
          type: string
          description: RFC 3339 datetime string representing the time at which the model was released. May be set to an epoch value if the release date is unknown.
          format: date-time
          example: '2025-02-19T00:00:00.0000000+00:00'
        display_name:
          title: Display Name
          type: string
          description: A human-readable name for the model.
          example: Claude 3.7 Sonnet
        id:
          title: Id
          type: string
          description: Unique model identifier.
          example: claude-3-7-sonnet-20250219
        type:
          title: Type
          enum:
            - model
          type: string
          description: "Object type.\n\nFor Models, this is always `\"model\"`."
          default: model
    NotFoundError:
      title: NotFoundError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Not found
        type:
          title: Type
          enum:
            - not_found_error
          type: string
          default: not_found_error
    OverloadedError:
      title: OverloadedError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Overloaded
        type:
          title: Type
          enum:
            - overloaded_error
          type: string
          default: overloaded_error
    PermissionError:
      title: PermissionError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Permission denied
        type:
          title: Type
          enum:
            - permission_error
          type: string
          default: permission_error
    PlainTextSource:
      title: PlainTextSource
      required:
        - data
        - media_type
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
        media_type:
          title: Media Type
          enum:
            - text/plain
          type: string
        type:
          title: Type
          enum:
            - text
          type: string
      additionalProperties: false
    RateLimitError:
      title: RateLimitError
      required:
        - message
        - type
      type: object
      properties:
        message:
          title: Message
          type: string
          default: Rate limited
        type:
          title: Type
          enum:
            - rate_limit_error
          type: string
          default: rate_limit_error
    RequestCharLocationCitation:
      title: RequestCharLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_char_index
        - start_char_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        end_char_index:
          title: End Char Index
          type: integer
        start_char_index:
          title: Start Char Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - char_location
          type: string
      additionalProperties: false
    RequestCitationsConfig:
      title: RequestCitationsConfig
      type: object
      properties:
        enabled:
          title: Enabled
          type: boolean
      additionalProperties: false
    RequestContentBlockLocationCitation:
      title: RequestContentBlockLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_block_index
        - start_block_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        end_block_index:
          title: End Block Index
          type: integer
        start_block_index:
          title: Start Block Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - content_block_location
          type: string
      additionalProperties: false
    RequestCounts:
      title: RequestCounts
      required:
        - canceled
        - errored
        - expired
        - processing
        - succeeded
      type: object
      properties:
        canceled:
          title: Canceled
          type: integer
          description: "Number of requests in the Message Batch that have been canceled.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 10
        errored:
          title: Errored
          type: integer
          description: "Number of requests in the Message Batch that encountered an error.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 30
        expired:
          title: Expired
          type: integer
          description: "Number of requests in the Message Batch that have expired.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 10
        processing:
          title: Processing
          type: integer
          description: Number of requests in the Message Batch that are processing.
          default: 0
          example: 100
        succeeded:
          title: Succeeded
          type: integer
          description: "Number of requests in the Message Batch that have completed successfully.\n\nThis is zero until processing of the entire Message Batch has ended."
          default: 0
          example: 50
    RequestDocumentBlock:
      title: RequestDocumentBlock
      required:
        - source
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        citations:
          $ref: '#/components/schemas/RequestCitationsConfig'
        context:
          title: Context
          minLength: 1
          type: string
          nullable: true
        source:
          title: Source
          oneOf:
            - $ref: '#/components/schemas/Base64PDFSource'
            - $ref: '#/components/schemas/PlainTextSource'
            - $ref: '#/components/schemas/ContentBlockSource'
            - $ref: '#/components/schemas/URLPDFSource'
          discriminator:
            propertyName: type
            mapping:
              base64: '#/components/schemas/Base64PDFSource'
              content: '#/components/schemas/ContentBlockSource'
              text: '#/components/schemas/PlainTextSource'
              url: '#/components/schemas/URLPDFSource'
        title:
          title: Title
          maxLength: 500
          minLength: 1
          type: string
          nullable: true
        type:
          title: Type
          enum:
            - document
          type: string
      additionalProperties: false
    RequestImageBlock:
      title: RequestImageBlock
      required:
        - source
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        source:
          title: Source
          oneOf:
            - $ref: '#/components/schemas/Base64ImageSource'
            - $ref: '#/components/schemas/URLImageSource'
          discriminator:
            propertyName: type
            mapping:
              base64: '#/components/schemas/Base64ImageSource'
              url: '#/components/schemas/URLImageSource'
        type:
          title: Type
          enum:
            - image
          type: string
      additionalProperties: false
    RequestPageLocationCitation:
      title: RequestPageLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_page_number
        - start_page_number
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        end_page_number:
          title: End Page Number
          type: integer
        start_page_number:
          title: Start Page Number
          minimum: 1
          type: integer
        type:
          title: Type
          enum:
            - page_location
          type: string
      additionalProperties: false
    RequestRedactedThinkingBlock:
      title: RequestRedactedThinkingBlock
      required:
        - data
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
        type:
          title: Type
          enum:
            - redacted_thinking
          type: string
      additionalProperties: false
    RequestServerToolUseBlock:
      title: RequestServerToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        id:
          title: Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          enum:
            - web_search
          type: string
        type:
          title: Type
          enum:
            - server_tool_use
          type: string
      additionalProperties: false
    RequestTextBlock:
      title: RequestTextBlock
      required:
        - text
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        citations:
          title: Citations
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/RequestCharLocationCitation'
              - $ref: '#/components/schemas/RequestPageLocationCitation'
              - $ref: '#/components/schemas/RequestContentBlockLocationCitation'
              - $ref: '#/components/schemas/RequestWebSearchResultLocationCitation'
            discriminator:
              propertyName: type
              mapping:
                char_location: '#/components/schemas/RequestCharLocationCitation'
                content_block_location: '#/components/schemas/RequestContentBlockLocationCitation'
                page_location: '#/components/schemas/RequestPageLocationCitation'
                web_search_result_location: '#/components/schemas/RequestWebSearchResultLocationCitation'
          nullable: true
        text:
          title: Text
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - text
          type: string
      additionalProperties: false
    RequestThinkingBlock:
      title: RequestThinkingBlock
      required:
        - signature
        - thinking
        - type
      type: object
      properties:
        signature:
          title: Signature
          type: string
        thinking:
          title: Thinking
          type: string
        type:
          title: Type
          enum:
            - thinking
          type: string
      additionalProperties: false
    RequestToolResultBlock:
      title: RequestToolResultBlock
      required:
        - tool_use_id
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        content:
          title: Content
          anyOf:
            - type: string
              x-stainless-skip:
                - go
                - cli
            - type: array
              items:
                title: Block
                oneOf:
                  - $ref: '#/components/schemas/RequestTextBlock'
                  - $ref: '#/components/schemas/RequestImageBlock'
                discriminator:
                  propertyName: type
                  mapping:
                    image: '#/components/schemas/RequestImageBlock'
                    text: '#/components/schemas/RequestTextBlock'
              x-stainless-naming:
                python:
                  type_name: Content
                ruby:
                  type_name: Content
        is_error:
          title: Is Error
          type: boolean
        tool_use_id:
          title: Tool Use Id
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
        type:
          title: Type
          enum:
            - tool_result
          type: string
      additionalProperties: false
    RequestToolUseBlock:
      title: RequestToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        id:
          title: Id
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          maxLength: 200
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - tool_use
          type: string
      additionalProperties: false
    RequestWebSearchResultBlock:
      title: RequestWebSearchResultBlock
      required:
        - encrypted_content
        - title
        - type
        - url
      type: object
      properties:
        encrypted_content:
          title: Encrypted Content
          type: string
        page_age:
          title: Page Age
          type: string
          nullable: true
        title:
          title: Title
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - web_search_result
          type: string
        url:
          title: Url
          minLength: 1
          type: string
      additionalProperties: false
    RequestWebSearchResultLocationCitation:
      title: RequestWebSearchResultLocationCitation
      required:
        - cited_text
        - encrypted_index
        - title
        - type
        - url
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        encrypted_index:
          title: Encrypted Index
          type: string
        title:
          title: Title
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        type:
          title: Type
          enum:
            - web_search_result_location
          type: string
        url:
          title: Url
          maxLength: 2048
          minLength: 1
          type: string
      additionalProperties: false
    RequestWebSearchToolResultBlock:
      title: RequestWebSearchToolResultBlock
      required:
        - content
        - tool_use_id
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        content:
          title: Content
          anyOf:
            - title: web_search_tool_result_block_item
              type: array
              items:
                $ref: '#/components/schemas/RequestWebSearchResultBlock'
            - $ref: '#/components/schemas/RequestWebSearchToolResultError'
        tool_use_id:
          title: Tool Use Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        type:
          title: Type
          enum:
            - web_search_tool_result
          type: string
      additionalProperties: false
    RequestWebSearchToolResultError:
      title: RequestWebSearchToolResultError
      required:
        - error_code
        - type
      type: object
      properties:
        error_code:
          $ref: '#/components/schemas/WebSearchToolResultErrorCode'
        type:
          title: Type
          enum:
            - web_search_tool_result_error
          type: string
      additionalProperties: false
    ResponseCharLocationCitation:
      title: ResponseCharLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_char_index
        - start_char_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          type: string
          nullable: true
        end_char_index:
          title: End Char Index
          type: integer
        start_char_index:
          title: Start Char Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - char_location
          type: string
          default: char_location
    ResponseContentBlockLocationCitation:
      title: ResponseContentBlockLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_block_index
        - start_block_index
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          type: string
          nullable: true
        end_block_index:
          title: End Block Index
          type: integer
        start_block_index:
          title: Start Block Index
          minimum: 0
          type: integer
        type:
          title: Type
          enum:
            - content_block_location
          type: string
          default: content_block_location
    ResponsePageLocationCitation:
      title: ResponsePageLocationCitation
      required:
        - cited_text
        - document_index
        - document_title
        - end_page_number
        - start_page_number
        - type
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        document_index:
          title: Document Index
          minimum: 0
          type: integer
        document_title:
          title: Document Title
          type: string
          nullable: true
        end_page_number:
          title: End Page Number
          type: integer
        start_page_number:
          title: Start Page Number
          minimum: 1
          type: integer
        type:
          title: Type
          enum:
            - page_location
          type: string
          default: page_location
    ResponseRedactedThinkingBlock:
      title: ResponseRedactedThinkingBlock
      required:
        - data
        - type
      type: object
      properties:
        data:
          title: Data
          type: string
        type:
          title: Type
          enum:
            - redacted_thinking
          type: string
          default: redacted_thinking
    ResponseServerToolUseBlock:
      title: ResponseServerToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        id:
          title: Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          enum:
            - web_search
          type: string
        type:
          title: Type
          enum:
            - server_tool_use
          type: string
          default: server_tool_use
    ResponseTextBlock:
      title: ResponseTextBlock
      required:
        - text
        - type
      type: object
      properties:
        citations:
          title: Citations
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ResponseCharLocationCitation'
              - $ref: '#/components/schemas/ResponsePageLocationCitation'
              - $ref: '#/components/schemas/ResponseContentBlockLocationCitation'
              - $ref: '#/components/schemas/ResponseWebSearchResultLocationCitation'
            discriminator:
              propertyName: type
              mapping:
                char_location: '#/components/schemas/ResponseCharLocationCitation'
                content_block_location: '#/components/schemas/ResponseContentBlockLocationCitation'
                page_location: '#/components/schemas/ResponsePageLocationCitation'
                web_search_result_location: '#/components/schemas/ResponseWebSearchResultLocationCitation'
          description: "Citations supporting the text block.\n\nThe type of citation returned will depend on the type of document being cited. Citing a PDF results in `page_location`, plain text results in `char_location`, and content document results in `content_block_location`."
          default: 
          nullable: true
        text:
          title: Text
          maxLength: 5000000
          minLength: 0
          type: string
        type:
          title: Type
          enum:
            - text
          type: string
          default: text
    ResponseThinkingBlock:
      title: ResponseThinkingBlock
      required:
        - signature
        - thinking
        - type
      type: object
      properties:
        signature:
          title: Signature
          type: string
        thinking:
          title: Thinking
          type: string
        type:
          title: Type
          enum:
            - thinking
          type: string
          default: thinking
    ResponseToolUseBlock:
      title: ResponseToolUseBlock
      required:
        - id
        - input
        - name
        - type
      type: object
      properties:
        id:
          title: Id
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
        input:
          title: Input
          type: object
        name:
          title: Name
          minLength: 1
          type: string
        type:
          title: Type
          enum:
            - tool_use
          type: string
          default: tool_use
    ResponseWebSearchResultBlock:
      title: ResponseWebSearchResultBlock
      required:
        - encrypted_content
        - page_age
        - title
        - type
        - url
      type: object
      properties:
        encrypted_content:
          title: Encrypted Content
          type: string
        page_age:
          title: Page Age
          type: string
          default: 
          nullable: true
        title:
          title: Title
          type: string
        type:
          title: Type
          enum:
            - web_search_result
          type: string
          default: web_search_result
        url:
          title: Url
          type: string
    ResponseWebSearchResultLocationCitation:
      title: ResponseWebSearchResultLocationCitation
      required:
        - cited_text
        - encrypted_index
        - title
        - type
        - url
      type: object
      properties:
        cited_text:
          title: Cited Text
          type: string
        encrypted_index:
          title: Encrypted Index
          type: string
        title:
          title: Title
          type: string
          nullable: true
        type:
          title: Type
          enum:
            - web_search_result_location
          type: string
          default: web_search_result_location
        url:
          title: Url
          type: string
    ResponseWebSearchToolResultBlock:
      title: ResponseWebSearchToolResultBlock
      required:
        - content
        - tool_use_id
        - type
      type: object
      properties:
        content:
          title: Content
          anyOf:
            - $ref: '#/components/schemas/ResponseWebSearchToolResultError'
            - type: array
              items:
                $ref: '#/components/schemas/ResponseWebSearchResultBlock'
        tool_use_id:
          title: Tool Use Id
          pattern: '^srvtoolu_[a-zA-Z0-9_]+$'
          type: string
        type:
          title: Type
          enum:
            - web_search_tool_result
          type: string
          default: web_search_tool_result
    ResponseWebSearchToolResultError:
      title: ResponseWebSearchToolResultError
      required:
        - error_code
        - type
      type: object
      properties:
        error_code:
          $ref: '#/components/schemas/WebSearchToolResultErrorCode'
        type:
          title: Type
          enum:
            - web_search_tool_result_error
          type: string
          default: web_search_tool_result_error
    ServerToolUsage:
      title: ServerToolUsage
      required:
        - web_search_requests
      type: object
      properties:
        web_search_requests:
          title: Web Search Requests
          minimum: 0
          type: integer
          description: The number of web search tool requests.
          default: 0
          example: 0
    SignatureContentBlockDelta:
      title: SignatureContentBlockDelta
      required:
        - signature
        - type
      type: object
      properties:
        signature:
          title: Signature
          type: string
        type:
          title: Type
          enum:
            - signature_delta
          type: string
          default: signature_delta
    SucceededResult:
      title: SucceededResult
      required:
        - message
        - type
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Message'
        type:
          title: Type
          enum:
            - succeeded
          type: string
          default: succeeded
    TextContentBlockDelta:
      title: TextContentBlockDelta
      required:
        - text
        - type
      type: object
      properties:
        text:
          title: Text
          type: string
        type:
          title: Type
          enum:
            - text_delta
          type: string
          default: text_delta
    TextEditor_20250124:
      title: TextEditor_20250124
      required:
        - name
        - type
      type: object
      properties:
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        name:
          title: Name
          enum:
            - str_replace_editor
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - text_editor_20250124
          type: string
      additionalProperties: false
    ThinkingConfigDisabled:
      title: ThinkingConfigDisabled
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - disabled
          type: string
      additionalProperties: false
    ThinkingConfigEnabled:
      title: ThinkingConfigEnabled
      required:
        - budget_tokens
        - type
      type: object
      properties:
        budget_tokens:
          title: Budget Tokens
          minimum: 1024
          type: integer
          description: "Determines how many tokens Claude can use for its internal reasoning process. Larger budgets can enable more thorough analysis for complex problems, improving response quality. \n\nMust be ≥1024 and less than `max_tokens`.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details."
        type:
          title: Type
          enum:
            - enabled
          type: string
      additionalProperties: false
    ThinkingContentBlockDelta:
      title: ThinkingContentBlockDelta
      required:
        - thinking
        - type
      type: object
      properties:
        thinking:
          title: Thinking
          type: string
        type:
          title: Type
          enum:
            - thinking_delta
          type: string
          default: thinking_delta
    Tool:
      title: Tool
      required:
        - name
        - input_schema
      type: object
      properties:
        type:
          title: Type
          enum:
            - custom
          type: string
          nullable: true
        description:
          title: Description
          type: string
          description: "Description of what this tool does.\n\nTool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema."
          example: Get the current weather in a given location
        name:
          title: Name
          maxLength: 64
          minLength: 1
          pattern: '^[a-zA-Z0-9_-]{1,64}$'
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        input_schema:
          type: object
          description: "[JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n\nThis defines the shape of the `input` that your tool accepts and that the model will produce."
          example:
            properties:
              location:
                description: 'The city and state, e.g. San Francisco, CA'
                type: string
              unit:
                description: 'Unit for the output - one of (celsius, fahrenheit)'
                type: string
            required:
              - location
            type: object
          x-stainless-skip:
            - cli
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
      additionalProperties: false
    ToolChoiceAny:
      title: ToolChoiceAny
      required:
        - type
      type: object
      properties:
        disable_parallel_tool_use:
          title: Disable Parallel Tool Use
          type: boolean
          description: "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use."
        type:
          title: Type
          enum:
            - any
          type: string
      additionalProperties: false
      description: The model will use any available tools.
    ToolChoiceAuto:
      title: ToolChoiceAuto
      required:
        - type
      type: object
      properties:
        disable_parallel_tool_use:
          title: Disable Parallel Tool Use
          type: boolean
          description: "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output at most one tool use."
        type:
          title: Type
          enum:
            - auto
          type: string
      additionalProperties: false
      description: The model will automatically decide whether to use tools.
    ToolChoiceNone:
      title: ToolChoiceNone
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          enum:
            - none
          type: string
      additionalProperties: false
      description: The model will not be allowed to use tools.
    ToolChoiceTool:
      title: ToolChoiceTool
      required:
        - name
        - type
      type: object
      properties:
        disable_parallel_tool_use:
          title: Disable Parallel Tool Use
          type: boolean
          description: "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use."
        name:
          title: Name
          type: string
          description: The name of the tool to use.
        type:
          title: Type
          enum:
            - tool
          type: string
      additionalProperties: false
      description: The model will use the specified tool with `tool_choice.name`.
    URLImageSource:
      title: URLImageSource
      required:
        - type
        - url
      type: object
      properties:
        type:
          title: Type
          enum:
            - url
          type: string
        url:
          title: Url
          type: string
      additionalProperties: false
    URLPDFSource:
      title: URLPDFSource
      required:
        - type
        - url
      type: object
      properties:
        type:
          title: Type
          enum:
            - url
          type: string
        url:
          title: Url
          type: string
      additionalProperties: false
    Usage:
      title: Usage
      required:
        - cache_creation_input_tokens
        - cache_read_input_tokens
        - input_tokens
        - output_tokens
        - server_tool_use
      type: object
      properties:
        cache_creation_input_tokens:
          title: Cache Creation Input Tokens
          minimum: 0
          type: integer
          description: The number of input tokens used to create the cache entry.
          default: 
          nullable: true
          example: 2051
        cache_read_input_tokens:
          title: Cache Read Input Tokens
          minimum: 0
          type: integer
          description: The number of input tokens read from the cache.
          default: 
          nullable: true
          example: 2051
        input_tokens:
          title: Input Tokens
          minimum: 0
          type: integer
          description: The number of input tokens which were used.
          example: 2095
        output_tokens:
          title: Output Tokens
          minimum: 0
          type: integer
          description: The number of output tokens which were used.
          example: 503
        server_tool_use:
          $ref: '#/components/schemas/ServerToolUsage'
    UserLocation:
      title: UserLocation
      required:
        - type
      type: object
      properties:
        city:
          title: City
          maxLength: 255
          minLength: 1
          type: string
          description: The city of the user.
          nullable: true
          example: New York
        country:
          title: Country
          maxLength: 2
          minLength: 2
          type: string
          description: 'The two letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the user.'
          nullable: true
          example: US
        region:
          title: Region
          maxLength: 255
          minLength: 1
          type: string
          description: The region of the user.
          nullable: true
          example: California
        timezone:
          title: Timezone
          maxLength: 255
          minLength: 1
          type: string
          description: 'The [IANA timezone](https://nodatime.org/TimeZones) of the user.'
          nullable: true
          example: America/New_York
        type:
          title: Type
          enum:
            - approximate
          type: string
      additionalProperties: false
    WebSearchToolResultErrorCode:
      title: WebSearchToolResultErrorCode
      enum:
        - invalid_tool_input
        - unavailable
        - max_uses_exceeded
        - too_many_requests
        - query_too_long
      type: string
    WebSearchTool_20250305:
      title: WebSearchTool_20250305
      required:
        - name
        - type
      type: object
      properties:
        allowed_domains:
          title: Allowed Domains
          type: array
          items:
            type: string
          description: 'If provided, only these domains will be included in results. Cannot be used alongside `blocked_domains`.'
          nullable: true
        blocked_domains:
          title: Blocked Domains
          type: array
          items:
            type: string
          description: 'If provided, these domains will never appear in results. Cannot be used alongside `allowed_domains`.'
          nullable: true
        cache_control:
          title: Cache Control
          type: 'null'
          oneOf:
            - $ref: '#/components/schemas/CacheControlEphemeral'
          description: Create a cache control breakpoint at this content block.
          nullable: true
          discriminator:
            propertyName: type
            mapping:
              ephemeral: '#/components/schemas/CacheControlEphemeral'
        max_uses:
          title: Max Uses
          minimum: 0
          exclusiveMinimum: true
          type: integer
          description: Maximum number of times the tool can be used in the API request.
          nullable: true
        name:
          title: Name
          enum:
            - web_search
          type: string
          description: "Name of the tool.\n\nThis is how the tool will be called by the model and in `tool_use` blocks."
        type:
          title: Type
          enum:
            - web_search_20250305
          type: string
        user_location:
          $ref: '#/components/schemas/UserLocation'
      additionalProperties: false
    CreateMessageParamsWithoutStream:
      title: CreateMessageParams
      required:
        - model
        - messages
        - max_tokens
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        messages:
          title: Messages
          type: array
          items:
            $ref: '#/components/schemas/InputMessage'
          description: "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.\n\nThere is a limit of 100000 messages in a single request."
        max_tokens:
          title: Max Tokens
          minimum: 1
          type: integer
          description: "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details."
          example: 1024
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: An object describing metadata about the request.
        stop_sequences:
          title: Stop Sequences
          type: array
          items:
            type: string
          description: "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence."
        system:
          title: System
          anyOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/RequestTextBlock'
          description: "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts)."
          example:
            - text: Today's date is 2024-06-01.
              type: text
        temperature:
          title: Temperature
          maximum: 1
          minimum: 0
          type: number
          description: "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic."
          example: 1
        thinking:
          $ref: '#/components/schemas/ThinkingConfigParam'
        tool_choice:
          $ref: '#/components/schemas/ToolChoice'
        tools:
          title: Tools
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Tool'
              - $ref: '#/components/schemas/BashTool_20250124'
              - $ref: '#/components/schemas/TextEditor_20250124'
              - $ref: '#/components/schemas/WebSearchTool_20250305'
          description: "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details."
          example:
            description: Get the current weather in a given location
            input_schema:
              properties:
                location:
                  description: 'The city and state, e.g. San Francisco, CA'
                  type: string
                unit:
                  description: 'Unit for the output - one of (celsius, fahrenheit)'
                  type: string
              required:
                - location
              type: object
            name: get_weather
        top_k:
          title: Top K
          minimum: 0
          type: integer
          description: "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 5
        top_p:
          title: Top P
          maximum: 1
          minimum: 0
          type: number
          description: "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`."
          example: 0.7
      additionalProperties: false
      example:
        max_tokens: 1024
        messages:
          - content: 'Hello, world'
            role: user
        model: claude-3-7-sonnet-20250219
    AnthropicBeta:
      anyOf:
        - type: string
        - enum:
            - message-batches-2024-09-24
            - prompt-caching-2024-07-31
            - computer-use-2024-10-22
            - computer-use-2025-01-24
            - pdfs-2024-09-25
            - token-counting-2024-11-01
            - token-efficient-tools-2025-02-19
            - output-128k-2025-02-19
          type: string
          x-stainless-nominal: false
    ThinkingConfigParam:
      title: Thinking
      oneOf:
        - $ref: '#/components/schemas/ThinkingConfigEnabled'
        - $ref: '#/components/schemas/ThinkingConfigDisabled'
      description: "Configuration for enabling Claude's extended thinking. \n\nWhen enabled, responses include `thinking` content blocks showing Claude's thinking process before the final answer. Requires a minimum budget of 1,024 tokens and counts towards your `max_tokens` limit.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details."
      discriminator:
        propertyName: type
        mapping:
          disabled: '#/components/schemas/ThinkingConfigDisabled'
          enabled: '#/components/schemas/ThinkingConfigEnabled'
    BetaThinkingConfigParam:
      title: Thinking
      oneOf:
        - $ref: '#/components/schemas/BetaThinkingConfigEnabled'
        - $ref: '#/components/schemas/BetaThinkingConfigDisabled'
      description: "Configuration for enabling Claude's extended thinking. \n\nWhen enabled, responses include `thinking` content blocks showing Claude's thinking process before the final answer. Requires a minimum budget of 1,024 tokens and counts towards your `max_tokens` limit.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details."
      discriminator:
        propertyName: type
        mapping:
          disabled: '#/components/schemas/BetaThinkingConfigDisabled'
          enabled: '#/components/schemas/BetaThinkingConfigEnabled'
    ToolChoice:
      title: Tool Choice
      oneOf:
        - $ref: '#/components/schemas/ToolChoiceAuto'
        - $ref: '#/components/schemas/ToolChoiceAny'
        - $ref: '#/components/schemas/ToolChoiceTool'
        - $ref: '#/components/schemas/ToolChoiceNone'
      description: 'How the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.'
      discriminator:
        propertyName: type
        mapping:
          any: '#/components/schemas/ToolChoiceAny'
          auto: '#/components/schemas/ToolChoiceAuto'
          none: '#/components/schemas/ToolChoiceNone'
          tool: '#/components/schemas/ToolChoiceTool'
    BetaToolChoice:
      title: Tool Choice
      oneOf:
        - $ref: '#/components/schemas/BetaToolChoiceAuto'
        - $ref: '#/components/schemas/BetaToolChoiceAny'
        - $ref: '#/components/schemas/BetaToolChoiceTool'
        - $ref: '#/components/schemas/BetaToolChoiceNone'
      description: 'How the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.'
      discriminator:
        propertyName: type
        mapping:
          any: '#/components/schemas/BetaToolChoiceAny'
          auto: '#/components/schemas/BetaToolChoiceAuto'
          none: '#/components/schemas/BetaToolChoiceNone'
          tool: '#/components/schemas/BetaToolChoiceTool'
    ContentBlock:
      oneOf:
        - $ref: '#/components/schemas/ResponseTextBlock'
        - $ref: '#/components/schemas/ResponseToolUseBlock'
        - $ref: '#/components/schemas/ResponseServerToolUseBlock'
        - $ref: '#/components/schemas/ResponseWebSearchToolResultBlock'
        - $ref: '#/components/schemas/ResponseThinkingBlock'
        - $ref: '#/components/schemas/ResponseRedactedThinkingBlock'
      discriminator:
        propertyName: type
        mapping:
          redacted_thinking: '#/components/schemas/ResponseRedactedThinkingBlock'
          server_tool_use: '#/components/schemas/ResponseServerToolUseBlock'
          text: '#/components/schemas/ResponseTextBlock'
          thinking: '#/components/schemas/ResponseThinkingBlock'
          tool_use: '#/components/schemas/ResponseToolUseBlock'
          web_search_tool_result: '#/components/schemas/ResponseWebSearchToolResultBlock'
    InputContentBlock:
      oneOf:
        - $ref: '#/components/schemas/RequestTextBlock'
        - $ref: '#/components/schemas/RequestImageBlock'
        - $ref: '#/components/schemas/RequestToolUseBlock'
        - $ref: '#/components/schemas/RequestServerToolUseBlock'
        - $ref: '#/components/schemas/RequestWebSearchToolResultBlock'
        - $ref: '#/components/schemas/RequestToolResultBlock'
        - $ref: '#/components/schemas/RequestDocumentBlock'
        - $ref: '#/components/schemas/RequestThinkingBlock'
        - $ref: '#/components/schemas/RequestRedactedThinkingBlock'
      discriminator:
        propertyName: type
        mapping:
          document: '#/components/schemas/RequestDocumentBlock'
          image: '#/components/schemas/RequestImageBlock'
          redacted_thinking: '#/components/schemas/RequestRedactedThinkingBlock'
          server_tool_use: '#/components/schemas/RequestServerToolUseBlock'
          text: '#/components/schemas/RequestTextBlock'
          thinking: '#/components/schemas/RequestThinkingBlock'
          tool_result: '#/components/schemas/RequestToolResultBlock'
          tool_use: '#/components/schemas/RequestToolUseBlock'
          web_search_tool_result: '#/components/schemas/RequestWebSearchToolResultBlock'
      x-stainless-python-extend-union:
        - ContentBlock
      x-stainless-python-extend-union-imports:
        - from .content_block import ContentBlock
    BetaContentBlock:
      oneOf:
        - $ref: '#/components/schemas/BetaResponseTextBlock'
        - $ref: '#/components/schemas/BetaResponseToolUseBlock'
        - $ref: '#/components/schemas/BetaResponseServerToolUseBlock'
        - $ref: '#/components/schemas/BetaResponseWebSearchToolResultBlock'
        - $ref: '#/components/schemas/BetaResponseThinkingBlock'
        - $ref: '#/components/schemas/BetaResponseRedactedThinkingBlock'
      discriminator:
        propertyName: type
        mapping:
          redacted_thinking: '#/components/schemas/BetaResponseRedactedThinkingBlock'
          server_tool_use: '#/components/schemas/BetaResponseServerToolUseBlock'
          text: '#/components/schemas/BetaResponseTextBlock'
          thinking: '#/components/schemas/BetaResponseThinkingBlock'
          tool_use: '#/components/schemas/BetaResponseToolUseBlock'
          web_search_tool_result: '#/components/schemas/BetaResponseWebSearchToolResultBlock'
    BetaInputContentBlock:
      oneOf:
        - $ref: '#/components/schemas/BetaRequestTextBlock'
        - $ref: '#/components/schemas/BetaRequestImageBlock'
        - $ref: '#/components/schemas/BetaRequestToolUseBlock'
        - $ref: '#/components/schemas/BetaRequestServerToolUseBlock'
        - $ref: '#/components/schemas/BetaRequestWebSearchToolResultBlock'
        - $ref: '#/components/schemas/BetaRequestToolResultBlock'
        - $ref: '#/components/schemas/BetaRequestDocumentBlock'
        - $ref: '#/components/schemas/BetaRequestThinkingBlock'
        - $ref: '#/components/schemas/BetaRequestRedactedThinkingBlock'
      discriminator:
        propertyName: type
        mapping:
          document: '#/components/schemas/BetaRequestDocumentBlock'
          image: '#/components/schemas/BetaRequestImageBlock'
          redacted_thinking: '#/components/schemas/BetaRequestRedactedThinkingBlock'
          server_tool_use: '#/components/schemas/BetaRequestServerToolUseBlock'
          text: '#/components/schemas/BetaRequestTextBlock'
          thinking: '#/components/schemas/BetaRequestThinkingBlock'
          tool_result: '#/components/schemas/BetaRequestToolResultBlock'
          tool_use: '#/components/schemas/BetaRequestToolUseBlock'
          web_search_tool_result: '#/components/schemas/BetaRequestWebSearchToolResultBlock'
    StopReason:
      enum:
        - end_turn
        - max_tokens
        - stop_sequence
        - tool_use
        - pause_turn
        - refusal
      type: string
    BetaStopReason:
      enum:
        - end_turn
        - max_tokens
        - stop_sequence
        - tool_use
        - pause_turn
        - refusal
      type: string
    Model:
      title: Model
      type: 'null'
      anyOf:
        - type: string
        - enum:
            - claude-3-7-sonnet-latest
          description: Our most intelligent model
          x-stainless-nominal: false
        - enum:
            - claude-3-7-sonnet-20250219
          description: Our most intelligent model
          x-stainless-nominal: false
        - enum:
            - claude-3-5-haiku-latest
          description: Fastest and most compact model for near-instant responsiveness
          x-stainless-nominal: false
        - enum:
            - claude-3-5-haiku-20241022
          description: Our fastest model
          x-stainless-nominal: false
        - enum:
            - claude-3-5-sonnet-latest
          description: Our previous most intelligent model
          x-stainless-nominal: false
        - enum:
            - claude-3-5-sonnet-20241022
          description: Our previous most intelligent model
          x-stainless-nominal: false
        - enum:
            - claude-3-5-sonnet-20240620
          x-stainless-nominal: false
        - enum:
            - claude-3-opus-latest
          description: Excels at writing and complex tasks
          x-stainless-nominal: false
        - enum:
            - claude-3-opus-20240229
          description: Excels at writing and complex tasks
          x-stainless-nominal: false
        - enum:
            - claude-3-sonnet-20240229
          description: Balance of speed and intelligence
          deprecated: true
          x-stainless-deprecation-message: 'Will reach end-of-life on July 21st, 2025. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.'
          x-stainless-nominal: false
        - enum:
            - claude-3-haiku-20240307
          description: Our previous most fast and cost-effective
          x-stainless-nominal: false
        - enum:
            - claude-2.1
          deprecated: true
          x-stainless-deprecation-message: 'Will reach end-of-life on July 21st, 2025. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.'
          x-stainless-nominal: false
        - enum:
            - claude-2.0
          deprecated: true
          x-stainless-deprecation-message: 'Will reach end-of-life on July 21st, 2025. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.'
          x-stainless-nominal: false
      description: 'The model that will complete your prompt.\n\nSee [models](https://docs.anthropic.com/en/docs/models-overview) for additional details and options.'
    Ping:
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - ping
          type: string
          default: ping
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-api-key
      in: header
security:
  - ApiKeyAuth: [ ]