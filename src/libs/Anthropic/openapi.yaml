openapi: 3.0.1
info:
  title: Anthropic API
  description: API Spec for Anthropic API. Please see https://docs.anthropic.com/en/api for more details.
  version: '1'
servers:
  - url: https://api.anthropic.com/v1
paths:
  /messages:
    post:
      tags:
        - Messages
      summary: Create a Message
      description: "Send a structured list of input messages with text and/or image content, and the\nmodel will generate the next message in the conversation.\n\nThe Messages API can be used for either single queries or stateless multi-turn\nconversations.\n"
      operationId: createMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /messages/batches:
    post:
      tags:
        - Messages
      summary: Create a Message Batch
      description: Send a batch of Message creation requests.
      operationId: createMessageBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageBatchRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBatch'
  '/messages/batches/{id}':
    get:
      tags:
        - Messages
      summary: Retrieve a Message Batch
      description: "This endpoint is idempotent and can be used to poll for Message Batch\ncompletion. To access the results of a Message Batch, make a request to the\n`results_url` field in the response.\n"
      operationId: retrieveMessageBatch
      parameters:
        - name: id
          in: path
          description: The ID of the message batch to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBatch'
components:
  schemas:
    CreateMessageRequest:
      required:
        - model
        - messages
        - max_tokens
      type: object
      properties:
        model:
          title: Model
          anyOf:
            - type: string
              description: The ID of the model to use for this request.
            - title: Models
              enum:
                - claude-3-5-sonnet-latest
                - claude-3-5-sonnet-20241022
                - claude-3-5-sonnet-20240620
                - claude-3-opus-latest
                - claude-3-opus-20240229
                - claude-3-sonnet-20240229
                - claude-3-haiku-20240307
                - claude-2.1
                - claude-2.0
              type: string
              description: "Available models. Mind that the list may not be exhaustive nor up-to-date.\n"
          description: "The model that will complete your prompt.\n\nSee [models](https://docs.anthropic.com/en/docs/models-overview) for additional\ndetails and options.\n"
          example: claude-3-5-sonnet-20241022
        messages:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant`\nconversational turns. When creating a new `Message`, you specify the prior\nconversational turns with the `messages` parameter, and the model then generates\nthe next `Message` in the conversation.\n\nEach input message must be an object with a `role` and `content`. You can\nspecify a single `user`-role message, or you can include multiple `user` and\n`assistant` messages. The first message must always use the `user` role.\n\nIf the final message uses the `assistant` role, the response content will\ncontinue immediately from the content in that message. This can be used to\nconstrain part of the model's response.\n\nSee [message content](https://docs.anthropic.com/en/api/messages-content) for\ndetails on how to construct valid message objects.\n\nExample with a single `user` message:\n\n```json\n[{ \"role\": \"user\", \"content\": \"Hello, Claude\" }]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  { \"role\": \"user\", \"content\": \"Hello there.\" },\n  { \"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\" },\n  { \"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\" }\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\n    \"role\": \"user\",\n    \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"\n  },\n  { \"role\": \"assistant\", \"content\": \"The best answer is (\" }\n]\n```\n\nEach input message `content` may be either a single `string` or an array of\ncontent blocks, where each block has a specific `type`. Using a `string` for\n`content` is shorthand for an array of one content block of type `\"text\"`. The\nfollowing input messages are equivalent:\n\n```json\n{ \"role\": \"user\", \"content\": \"Hello, Claude\" }\n```\n\n```json\n{ \"role\": \"user\", \"content\": [{ \"type\": \"text\", \"text\": \"Hello, Claude\" }] }\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"image\",\n      \"source\": {\n        \"type\": \"base64\",\n        \"media_type\": \"image/jpeg\",\n        \"data\": \"/9j/4AAQSkZJRg...\"\n      }\n    },\n    { \"type\": \"text\", \"text\": \"What is in this image?\" }\n  ]\n}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`,\n`image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples) for more\ninput examples.\n\nNote that if you want to include a\n[system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use\nthe top-level `system` parameter â€” there is no `\"system\"` role for input\nmessages in the Messages API.\n"
        max_tokens:
          type: integer
          description: "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter\nonly specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter. See\n[models](https://docs.anthropic.com/en/docs/models-overview) for details.\n"
        metadata:
          $ref: '#/components/schemas/CreateMessageRequestMetadata'
        stop_sequences:
          type: array
          items:
            type: string
          description: "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn,\nwhich will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of\ntext, you can use the `stop_sequences` parameter. If the model encounters one of\nthe custom sequences, the response `stop_reason` value will be `\"stop_sequence\"`\nand the response `stop_sequence` value will contain the matched stop sequence.\n"
        system:
          type: string
          oneOf:
            - type: string
              description: A single text block.
            - type: array
              items:
                $ref: '#/components/schemas/Block'
              description: An array of content blocks.
          description: "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such\nas specifying a particular goal or role. See our\n[guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).\n"
        temperature:
          type: number
          description: "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0`\nfor analytical / multiple choice, and closer to `1.0` for creative and\ngenerative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully\ndeterministic.\n"
        tool_choice:
          $ref: '#/components/schemas/ToolChoice'
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
          description: "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use`\ncontent blocks that represent the model's use of those tools. You can then run\nthose tools using the tool input generated by the model and then optionally\nreturn results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n- `name`: Name of the tool.\n- `description`: Optional, but strongly-recommended description of the tool.\n- `input_schema`: [JSON schema](https://json-schema.org/) for the tool `input`\n  shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce\n`tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an\ninput, and return the following back to the model in a subsequent `user`\nmessage:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and\nfunctions, or more generally whenever you want the model to produce a particular\nJSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.\n"
        top_k:
          type: integer
          description: "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses.\n[Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use\n`temperature`.\n"
        top_p:
          type: number
          description: "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options\nfor each subsequent token in decreasing probability order and cut it off once it\nreaches a particular probability specified by `top_p`. You should either alter\n`temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use\n`temperature`.\n"
        stream:
          type: boolean
          description: "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/messages-streaming) for\ndetails.\n"
          default: false
      description: The request parameters for creating a message.
    CreateMessageRequestMetadata:
      type: object
      properties:
        user_id:
          type: string
          description: "An external identifier for the user who is associated with the request.\n\nThis should be a uuid, hash value, or other opaque identifier. Anthropic may use\nthis id to help detect abuse. Do not include any identifying information such as\nname, email address, or phone number.\n"
      description: An object describing metadata about the request.
    ToolChoice:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ToolChoiceType'
        name:
          type: string
          description: The name of the tool to use.
        disable_parallel_tool_use:
          type: boolean
          description: Whether to disable parallel tool use.
      description: "How the model should use the provided tools. The model can use a specific tool, \nany available tool, or decide by itself.\n\n- `auto`: allows Claude to decide whether to call any provided tools or not. This is the default value.\n- `any`: tells Claude that it must use one of the provided tools, but doesnâ€™t force a particular tool.\n- `tool`: allows us to force Claude to always use a particular tool specified in the `name` field.\n"
    ToolChoiceType:
      enum:
        - auto
        - any
        - tool
      type: string
      description: "How the model should use the provided tools. The model can use a specific tool, \nany available tool, or decide by itself.\n\n- `auto`: allows Claude to decide whether to call any provided tools or not. This is the default value.\n- `any`: tells Claude that it must use one of the provided tools, but doesn't force a particular tool.\n- `tool`: allows us to force Claude to always use a particular tool specified in the `name` field.\n"
    Message:
      required:
        - content
        - role
      type: object
      properties:
        id:
          type: string
          description: "Unique object identifier.\n\nThe format and length of IDs may change over time.\n"
        content:
          oneOf:
            - type: string
              description: A single text block.
            - type: array
              items:
                $ref: '#/components/schemas/Block'
              description: An array of content blocks.
          description: The content of the message.
        role:
          $ref: '#/components/schemas/MessageRole'
        model:
          type: string
          description: The model that handled the request.
        stop_reason:
          $ref: '#/components/schemas/StopReason'
        stop_sequence:
          type: string
          description: "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was\ngenerated.\n"
        type:
          type: string
          description: "Object type.\n\nFor Messages, this is always `\"message\"`.\n"
        usage:
          $ref: '#/components/schemas/Usage'
      description: A message in a chat conversation.
    MessageRole:
      enum:
        - user
        - assistant
      type: string
      description: The role of the messages author.
    Tool:
      oneOf:
        - $ref: '#/components/schemas/ToolCustom'
        - $ref: '#/components/schemas/ToolComputerUse'
        - $ref: '#/components/schemas/ToolTextEditor'
        - $ref: '#/components/schemas/ToolBash'
      description: A tool the model may use.
      discriminator:
        propertyName: type
    ToolCustom:
      required:
        - name
        - input_schema
      type: object
      properties:
        type:
          type: string
          description: The type of tool.
          default: 
        name:
          type: string
          description: 'The name of the tool. Must match the regex `^[a-zA-Z0-9_-]{1,64}$`.'
        description:
          type: string
          description: "Description of what this tool does.\n\nTool descriptions should be as detailed as possible. The more information that\nthe model has about what the tool is and how to use it, the better it will\nperform. You can use natural language descriptions to reinforce important\naspects of the tool input JSON schema.\n"
        input_schema:
          type: object
          description: "[JSON schema](https://json-schema.org/) for this tool's input.\n\nThis defines the shape of the `input` that your tool accepts and that the model\nwill produce.\n"
      description: A custom tool the model may use.
    ToolComputerUse:
      required:
        - display_width_px
        - display_height_px
      type: object
      properties:
        type:
          type: string
          description: The type of tool.
          default: computer_20241022
        name:
          type: string
          description: The name of the tool.
          default: computer
        cache_control:
          $ref: '#/components/schemas/CacheControlEphemeral'
        display_width_px:
          type: integer
          description: The width of the display in pixels.
        display_height_px:
          type: integer
          description: The height of the display in pixels.
        display_number:
          type: integer
          description: The number of the display to use.
          nullable: true
      description: 'A tool that uses a mouse and keyboard to interact with a computer, and take screenshots.'
    ToolTextEditor:
      type: object
      properties:
        type:
          type: string
          description: The type of tool.
          default: text_editor_20241022
        name:
          type: string
          description: The name of the tool.
          default: str_replace_editor
        cache_control:
          $ref: '#/components/schemas/CacheControlEphemeral'
      description: 'A tool for viewing, creating and editing files.'
    ToolBash:
      type: object
      properties:
        type:
          type: string
          description: The type of tool.
          default: bash_20241022
        name:
          type: string
          description: The name of the tool.
          default: bash
        cache_control:
          $ref: '#/components/schemas/CacheControlEphemeral'
      description: A tool for running commands in a bash shell.
    Block:
      oneOf:
        - $ref: '#/components/schemas/TextBlock'
        - $ref: '#/components/schemas/ImageBlock'
        - $ref: '#/components/schemas/ToolUseBlock'
        - $ref: '#/components/schemas/ToolResultBlock'
      description: A block of content in a message.
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/TextBlock'
          image: '#/components/schemas/ImageBlock'
          tool_use: '#/components/schemas/ToolUseBlock'
          tool_result: '#/components/schemas/ToolResultBlock'
    TextBlock:
      required:
        - text
        - type
      type: object
      properties:
        text:
          type: string
          description: The text content.
        type:
          enum:
            - text
          type: string
          description: The type of content block.
          default: text
        cache_control:
          $ref: '#/components/schemas/CacheControlEphemeral'
      description: A block of text content.
    ImageBlock:
      required:
        - source
        - type
      type: object
      properties:
        source:
          $ref: '#/components/schemas/ImageBlockSource'
        type:
          enum:
            - image
          type: string
          description: The type of content block.
          default: image
        cache_control:
          $ref: '#/components/schemas/CacheControlEphemeral'
      description: A block of image content.
    ImageBlockSource:
      required:
        - data
        - media_type
        - type
      type: object
      properties:
        data:
          type: string
          description: The base64-encoded image data.
        media_type:
          enum:
            - image/jpeg
            - image/png
            - image/gif
            - image/webp
          type: string
          description: The media type of the image.
        type:
          enum:
            - base64
          type: string
          description: The type of image source.
      description: The source of an image block.
    ToolUseBlock:
      required:
        - id
        - name
        - input
        - type
      type: object
      properties:
        id:
          type: string
          description: "A unique identifier for this particular tool use block. \nThis will be used to match up the tool results later.\n"
          example: toolu_01A09q90qw90lq917835lq9
        name:
          type: string
          description: The name of the tool being used.
          example: get_weather
        input:
          type: object
          description: 'An object containing the input being passed to the tool, conforming to the tool''s `input_schema`.'
        type:
          enum:
            - tool_use
          type: string
          description: The type of content block.
          default: tool_use
        cache_control:
          $ref: '#/components/schemas/CacheControlEphemeral'
      description: The tool the model wants to use.
    ToolResultBlock:
      required:
        - tool_use_id
        - content
        - type
      type: object
      properties:
        tool_use_id:
          type: string
          description: The `id` of the tool use request this is a result for.
        content:
          oneOf:
            - type: string
              description: A single text block.
            - type: array
              items:
                $ref: '#/components/schemas/Block'
              description: An array of content blocks.
          description: "The result of the tool, as a string (e.g. `\"content\": \"15 degrees\"`) \nor list of nested content blocks (e.g. `\"content\": [{\"type\": \"text\", \"text\": \"15 degrees\"}]`). \nThese content blocks can use the text or image types.\n"
        is_error:
          type: boolean
          description: Set to `true` if the tool execution resulted in an error.
        type:
          enum:
            - tool_result
          type: string
          description: The type of content block.
          default: tool_result
        cache_control:
          $ref: '#/components/schemas/CacheControlEphemeral'
      description: The result of using a tool.
    CacheControlEphemeral:
      type: object
      properties:
        type:
          enum:
            - ephemeral
          type: string
          default: ephemeral
      description: The cache control settings.
    StopReason:
      enum:
        - end_turn
        - max_tokens
        - stop_sequence
        - tool_use
      type: string
      description: "The reason that we stopped.\n\nThis may be one the following values:\n\n- `\"end_turn\"`: the model reached a natural stopping point\n- `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n- `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n- `\"tool_use\"`: the model invoked one or more tools\n\nIn non-streaming mode this value is always non-null. In streaming mode, it is\nnull in the `message_start` event and non-null otherwise.\n"
      nullable: true
    Usage:
      required:
        - input_tokens
        - output_tokens
      type: object
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens which were used.
        output_tokens:
          type: integer
          description: The number of output tokens which were used.
        cache_creation_input_tokens:
          type: integer
          description: The number of input tokens read from the cache.
        cache_read_input_tokens:
          type: integer
          description: The number of input tokens used to create the cache entry.
      description: "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the\nunderlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the\nmodel. The model's output then goes through a parsing stage before becoming an\nAPI response. As a result, the token counts in `usage` will not match one-to-one\nwith the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response\nfrom Claude.\n"
    CreateMessageBatchRequest:
      required:
        - requests
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/BatchMessageRequest'
          description: List of requests for prompt completion. Each is an individual request to create a Message.
      description: The request parameters for creating a message batch.
    BatchMessageRequest:
      required:
        - custom_id
        - params
      type: object
      properties:
        custom_id:
          type: string
          description: "Developer-provided ID created for each request in a Message Batch. Useful for\nmatching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.\n"
        params:
          $ref: '#/components/schemas/CreateMessageRequest'
      description: An individual message request within a batch.
    MessageBatch:
      required:
        - id
        - created_at
        - expires_at
        - processing_status
        - request_counts
        - type
      type: object
      properties:
        id:
          type: string
          description: Unique object identifier for the message batch.
        created_at:
          type: string
          description: RFC 3339 datetime string representing the time at which the Message Batch was created.
          format: date-time
        expires_at:
          type: string
          description: 'RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.'
          format: date-time
        processing_status:
          enum:
            - in_progress
            - canceling
            - ended
          type: string
          description: Processing status of the Message Batch.
        request_counts:
          $ref: '#/components/schemas/MessageBatchRequestCounts'
        results_url:
          type: string
          description: URL to a `.jsonl` file containing the results of the Message Batch requests. Specified only once processing ends.
          nullable: true
        type:
          enum:
            - message_batch
          type: string
          description: 'Object type. For Message Batches, this is always `"message_batch"`.'
      description: A batch of message requests.
    MessageBatchRequestCounts:
      required:
        - processing
        - succeeded
        - errored
        - canceled
        - expired
      type: object
      properties:
        processing:
          type: integer
          description: Number of requests in the Message Batch that are processing.
        succeeded:
          type: integer
          description: Number of requests in the Message Batch that have completed successfully.
        errored:
          type: integer
          description: Number of requests in the Message Batch that encountered an error.
        canceled:
          type: integer
          description: Number of requests in the Message Batch that have been canceled.
        expired:
          type: integer
          description: Number of requests in the Message Batch that have expired.
      description: 'Tallies requests within the Message Batch, categorized by their status.'
    MessageStreamEvent:
      type: object
      oneOf:
        - $ref: '#/components/schemas/MessageStartEvent'
        - $ref: '#/components/schemas/MessageDeltaEvent'
        - $ref: '#/components/schemas/MessageStopEvent'
        - $ref: '#/components/schemas/ContentBlockStartEvent'
        - $ref: '#/components/schemas/ContentBlockDeltaEvent'
        - $ref: '#/components/schemas/ContentBlockStopEvent'
        - $ref: '#/components/schemas/PingEvent'
        - $ref: '#/components/schemas/ErrorEvent'
      description: A event in a streaming conversation.
      discriminator:
        propertyName: type
        mapping:
          message_start: '#/components/schemas/MessageStartEvent'
          message_delta: '#/components/schemas/MessageDeltaEvent'
          message_stop: '#/components/schemas/MessageStopEvent'
          content_block_start: '#/components/schemas/ContentBlockStartEvent'
          content_block_delta: '#/components/schemas/ContentBlockDeltaEvent'
          content_block_stop: '#/components/schemas/ContentBlockStopEvent'
          ping: '#/components/schemas/PingEvent'
          error: '#/components/schemas/ErrorEvent'
    MessageStreamEventType:
      enum:
        - message_start
        - message_delta
        - message_stop
        - content_block_start
        - content_block_delta
        - content_block_stop
        - ping
        - error
      type: string
      description: The type of a streaming event.
    MessageStartEvent:
      required:
        - message
        - type
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Message'
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
      description: A start event in a streaming conversation.
    MessageDeltaEvent:
      required:
        - delta
        - type
        - usage
      type: object
      properties:
        delta:
          $ref: '#/components/schemas/MessageDelta'
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
        usage:
          $ref: '#/components/schemas/MessageDeltaUsage'
      description: A delta event in a streaming conversation.
    MessageDelta:
      type: object
      properties:
        stop_reason:
          $ref: '#/components/schemas/StopReason'
        stop_sequence:
          type: string
          description: "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was\ngenerated.\n"
      description: A delta in a streaming message.
    MessageDeltaUsage:
      required:
        - output_tokens
      type: object
      properties:
        output_tokens:
          type: integer
          description: The cumulative number of output tokens which were used.
      description: "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the\nunderlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the\nmodel. The model's output then goes through a parsing stage before becoming an\nAPI response. As a result, the token counts in `usage` will not match one-to-one\nwith the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response\nfrom Claude.\n"
    MessageStopEvent:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
      description: A stop event in a streaming conversation.
    ContentBlockStartEvent:
      required:
        - content_block
        - index
        - type
      type: object
      properties:
        content_block:
          $ref: '#/components/schemas/Block'
        index:
          type: integer
          description: The index of the content block.
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
      description: A start event in a streaming content block.
    ContentBlockDeltaEvent:
      required:
        - delta
        - index
        - type
      type: object
      properties:
        delta:
          $ref: '#/components/schemas/BlockDelta'
        index:
          type: integer
          description: The index of the content block.
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
      description: A delta event in a streaming content block.
    BlockDelta:
      oneOf:
        - $ref: '#/components/schemas/TextBlockDelta'
        - $ref: '#/components/schemas/InputJsonBlockDelta'
      description: A delta in a streaming message.
      discriminator:
        propertyName: type
        mapping:
          text_delta: '#/components/schemas/TextBlockDelta'
          input_json_delta: '#/components/schemas/InputJsonBlockDelta'
    TextBlockDelta:
      required:
        - text
        - type
      type: object
      properties:
        text:
          type: string
          description: The text delta.
        type:
          type: string
          description: The type of content block.
          default: text_delta
      description: A delta in a streaming text block.
    InputJsonBlockDelta:
      required:
        - text
        - type
      type: object
      properties:
        partial_json:
          type: string
          description: The partial JSON delta.
        type:
          type: string
          description: The type of content block.
          default: input_json_delta
      description: A delta in a streaming input JSON.
    ContentBlockStopEvent:
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the content block.
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
      description: A stop event in a streaming content block.
    PingEvent:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
      description: A ping event in a streaming conversation.
    ErrorEvent:
      required:
        - type
        - error
      type: object
      properties:
        type:
          $ref: '#/components/schemas/MessageStreamEventType'
        error:
          $ref: '#/components/schemas/Error'
      description: An error event in a streaming conversation.
    Error:
      required:
        - type
        - message
      type: object
      properties:
        type:
          type: string
          description: The type of error.
        message:
          type: string
          description: A human-readable error message.
      description: An error object.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-api-key
      in: header
security:
  - ApiKeyAuth: [ ]
tags:
  - name: Messages
    description: 'Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.'